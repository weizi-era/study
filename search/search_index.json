{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my blog .","title":"\u4ecb\u7ecd"},{"location":"about/","text":"Superest nata regnum tamen \u00b6 Fide subit fletu \u00b6 Lorem markdownum se quas commune ossa gratia virgo, et rursus corpus pharetras deam, paenituisse. Sumat natum enim quoque solent candore cumulumque cannis saetigerosque ducitur coepto frondibus. Et amnis reverentia nihil inmurmurat amplexus recumbis dicunt tuens duabuset: meus. googleBiometricsE = analogProgram + 4 - idePciSo; if (rippingYobibyte(rate) + commerce.pasteBlacklistDirectx(gigaflops_sdsl, 73, interactive_hypermedia) + hard_beta.wizard_digital(64, ergonomics_manet_hdd, hard)) { dvd(driveExtensionReal, ccd, iphoneProgressiveQueue); manet_digitize(gammaSupplyQuad, networking, cut_white + windowsScalable); } server_it_up.print.piracy(tween_soft / wddm); if (http <= 2) { megabitBandwidth.tebibyteBarebones = -5 + standalone - wired( peripheral_bmp_myspace); microphone_marketing.remoteHoneypot += nosqlDot; } Numina quam, suo pectus mane, imagine avidi hosti servanda esse . Surgere ac sunt Iuno negare cernis, erat Messenia. Nubibus Auram devia \u00b6 Una tamen quas, hic hordea et vices redit. Ortus ac rettulit procul, parte esse ipsa quamquam animam Pittheam inde homini amisso. Est tenet divitiis discedens sedes inde inmedicabile dixit audacissimus post ingemuit orbem. if (recordDfsWorm.hdtvPrinter(dv, favorites)) { ioNtfs /= 50; threading *= domain_export_footer; } else { queryVertical = services; unix_file(shortcutLinuxSurface + pageAlert, fddi_standby, systemExport); printer_php_in.navigation_component_nic(traceroute( autoresponderArchieProtector), -2 + nanometerMainframe); } digitize(clipboard, linkedin_servlet(mcaCpuRup, adHalf) / motherboard, key( lagQuicktimeTroubleshooting, waisCookieBrouter * mtu, bankruptcy_design.runtime(basebandDeleteArray, wrapPortVideo, 5))); pcb_marketing_saas.grayscale.motion_exbibyte_of(keywords_recursive, 792787); duplex += pinterest_raw.menu(udp_worm_navigation(icann, 3 + 5), pitchSip); if (toolbar_rdf_copyright) { program_warm += nosql_noc; web_traceroute += fileFreeware.bootDimmPublic.dbms(memory_visual, rpmNetworking + mainframe, -4 * bcc_windows_hypermedia); dataPrinterDocument += terahertz_sd; } else { snippet = designScanSpam(lcd_wizard, -3, ipCard); speed_secondary(swipeFramework, template_web); socialGps.cold_key_hacker(1, kerningAlphaWave / 546092, 40); } Spectabilis hunc factum duos magno patet ubi per est accusasse serpentis humus Themis tamen. Venerit Temesesque fieri pallore: eris manus, parte pudoris laude progenies sua. Monet ardebant nullasque absentes mentis; metuens ad corpus in quae cum, mihi retraxi? Iam valida inplet sequiturque quem : non dicor sed hostem, odium , quae posuit adeo, medium.","title":"\u5173\u4e8e"},{"location":"about/#superest_nata_regnum_tamen","text":"","title":"Superest nata regnum tamen"},{"location":"about/#fide_subit_fletu","text":"Lorem markdownum se quas commune ossa gratia virgo, et rursus corpus pharetras deam, paenituisse. Sumat natum enim quoque solent candore cumulumque cannis saetigerosque ducitur coepto frondibus. Et amnis reverentia nihil inmurmurat amplexus recumbis dicunt tuens duabuset: meus. googleBiometricsE = analogProgram + 4 - idePciSo; if (rippingYobibyte(rate) + commerce.pasteBlacklistDirectx(gigaflops_sdsl, 73, interactive_hypermedia) + hard_beta.wizard_digital(64, ergonomics_manet_hdd, hard)) { dvd(driveExtensionReal, ccd, iphoneProgressiveQueue); manet_digitize(gammaSupplyQuad, networking, cut_white + windowsScalable); } server_it_up.print.piracy(tween_soft / wddm); if (http <= 2) { megabitBandwidth.tebibyteBarebones = -5 + standalone - wired( peripheral_bmp_myspace); microphone_marketing.remoteHoneypot += nosqlDot; } Numina quam, suo pectus mane, imagine avidi hosti servanda esse . Surgere ac sunt Iuno negare cernis, erat Messenia.","title":"Fide subit fletu"},{"location":"about/#nubibus_auram_devia","text":"Una tamen quas, hic hordea et vices redit. Ortus ac rettulit procul, parte esse ipsa quamquam animam Pittheam inde homini amisso. Est tenet divitiis discedens sedes inde inmedicabile dixit audacissimus post ingemuit orbem. if (recordDfsWorm.hdtvPrinter(dv, favorites)) { ioNtfs /= 50; threading *= domain_export_footer; } else { queryVertical = services; unix_file(shortcutLinuxSurface + pageAlert, fddi_standby, systemExport); printer_php_in.navigation_component_nic(traceroute( autoresponderArchieProtector), -2 + nanometerMainframe); } digitize(clipboard, linkedin_servlet(mcaCpuRup, adHalf) / motherboard, key( lagQuicktimeTroubleshooting, waisCookieBrouter * mtu, bankruptcy_design.runtime(basebandDeleteArray, wrapPortVideo, 5))); pcb_marketing_saas.grayscale.motion_exbibyte_of(keywords_recursive, 792787); duplex += pinterest_raw.menu(udp_worm_navigation(icann, 3 + 5), pitchSip); if (toolbar_rdf_copyright) { program_warm += nosql_noc; web_traceroute += fileFreeware.bootDimmPublic.dbms(memory_visual, rpmNetworking + mainframe, -4 * bcc_windows_hypermedia); dataPrinterDocument += terahertz_sd; } else { snippet = designScanSpam(lcd_wizard, -3, ipCard); speed_secondary(swipeFramework, template_web); socialGps.cold_key_hacker(1, kerningAlphaWave / 546092, 40); } Spectabilis hunc factum duos magno patet ubi per est accusasse serpentis humus Themis tamen. Venerit Temesesque fieri pallore: eris manus, parte pudoris laude progenies sua. Monet ardebant nullasque absentes mentis; metuens ad corpus in quae cum, mihi retraxi? Iam valida inplet sequiturque quem : non dicor sed hostem, odium , quae posuit adeo, medium.","title":"Nubibus Auram devia"},{"location":"android/android_startup/","text":"Android\u7cfb\u7edf\u542f\u52a8\u6d41\u7a0b \u00b6 \u524d\u8a00 \u00b6 \u4e86\u89e3Android\u7cfb\u7edf\u542f\u52a8\uff0c\u6700\u76f4\u63a5\u7684\u65b9\u5f0f\u5c31\u662f\u62ff\u4e00\u53f0\u624b\u673a\uff0c\u5f53\u6211\u4eec\u8981\u5f00\u673a\u4f7f\u7528\u65f6\uff0c\u9700\u8981\u600e\u4e48\u505a\uff1f\u8fd9\u4e2a\u95ee\u9898\u770b\u8d77\u6765\u5f88\u65e0\u77e5\uff0c\u4f46\u51e1\u73a9\u8fc7\u624b\u673a\u7684\u4eba\u90fd\u77e5\u9053\uff0c\u6309\u7535\u6e90\u952e\u5f00\u673a\u561b\u3002\u5bf9\uff0c\u662f\u6309\u7535\u6e90\u952e\u5f00\u673a\uff0c\u5c4f\u5e55\u4f1a\u5f39\u51fa\u624b\u673a\u54c1\u724clogo\uff0c\u8fc7\u4e00\u4f1a\u5c31\u8fdb\u5165\u684c\u9762\u4e86\u3002\u8fd9\u662f\u6211\u4eec\u6240\u770b\u5230\u7684\u73b0\u8c61\uff0c\u4f60\u53ef\u77e5\u9053\u5176\u4e2d\u7684\u7f18\u7531\u5417\uff1f\u867d\u7136\u73b0\u8c61\u5f88\u7b80\u5355\uff0c\u8fc7\u7a0b\u4e5f\u5f88\u5feb\uff0c\u4f46\u662f\u91cc\u9762\u662f\u901a\u8fc7\u591a\u5c11\u4e2a\u6d41\u7a0b\u8d70\u5230\u684c\u9762\u8fd9\u4e00\u6b65\u5462\uff0c\u4eca\u5929\u5c31\u5e26\u5927\u5bb6\u6765\u5206\u6790\u4e0b\u8fd9\u770b\u4f3c\u7b80\u5355\uff0c\u4f46\u53c8\u4e0d\u7b80\u5355\u7684\u542f\u52a8\u6d41\u7a0b\u3002 \u65e2\u7136\u8981\u5206\u6790\u6d41\u7a0b\uff0c\u90a3\u6211\u4eec\u5c31\u4ece\u6700\u5f00\u59cb\uff08\u6309\u7535\u6e90\u952e\u5f00\u59cb\uff09\u6765\u5206\u6790\uff0c\u5f53\u6211\u4eec\u6309\u4e0b\u7535\u6e90\u952e\uff0c\u4f1a\u6267\u884c\u54ea\u4e9b\u6307\u4ee4\uff0c\u8c03\u7528\u54ea\u4e9b\u6d41\u7a0b\uff0c\u4e00\u8d77\u6765\u770b\uff1a \u6709\u4e24\u79cd\u6309\u952e\u65b9\u5f0f\u80fd\u591f\u542f\u52a8\u7cfb\u7edf\uff0c\u957f\u6309\u7535\u6e90\u952e\u548c\u7535\u6e90\u952e+\u97f3\u91cf\u4e0b\u952e\uff0c\u957f\u6309\u7535\u6e90\u952e\u8fdb\u5165\u7684\u662fBootLoader\u6a21\u5f0f\uff0c\u800c\u7535\u6e90\u952e+\u97f3\u91cf\u4e0b\u952e\u8fdb\u5165\u7684\u662fRecovery\u6a21\u5f0f\uff0c\u6211\u4eec\u6b63\u5e38\u5f00\u673a\u4e00\u822c\u90fd\u901a\u8fc7\u7b2c\u4e00\u79cd\u65b9\u5f0f\u8fdb\u5165\u3002 Bootloader\u2014\u2014\u7b2c\u4e00\u4e2a\u7a0b\u5e8f \u00b6 \u5f53\u6309\u4e0b\u7535\u6e90\u952e\u6216\u8005\u7cfb\u7edf\u91cd\u542f\u7684\u65f6\u5019\uff0c\u5f15\u5bfc\u82af\u7247\u4f1a\u4eceROM\uff08\u8fd9\u91cc\u4e00\u822c\u662fFlash ROM\uff0c\u5373\u95ea\u5b58\uff09\u4e2d\u9884\u5b9a\u4e49\u7684\u4f4d\u7f6e\u5c06BootLoader\u52a0\u8f7d\u5230RAM\u4e2d\uff0c\u63a5\u7740\uff0cBootLoader\u4f1a\u628alinux\u5185\u6838\u52a0\u8f7d\u5230RAM\u4e2d\u5e76\u542f\u52a8\u3002 BootLoader\u662f\u5728\u7cfb\u7edf\u5185\u6838\u8fd0\u884c\u4e4b\u524d\u8fd0\u884c\u7684\u4e00\u5c0f\u6bb5\u7a0b\u5e8f\uff0c\u4e5f\u662f\u7cfb\u7edf\u8fd0\u884c\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5b83\u7684\u4f5c\u7528\u5982\u4e0b\uff1a 1.\u521d\u59cb\u5316RAM\uff08\u4e00\u822c\u6307\u5185\u5b58\uff09 2.\u521d\u59cb\u5316\u786c\u4ef6\u8bbe\u5907 3.\u52a0\u8f7d\u5185\u6838\u548c\u5185\u5b58\u7a7a\u95f4\u5f71\u50cf\u56fe 4.\u8df3\u8f6c\u5230\u5185\u6838 Android\u7cfb\u7edf\u7684\u542f\u52a8\uff0c\u4e5f\u662flinux\u7cfb\u7edf\u7684\u542f\u52a8\u3002 \u542f\u52a8\u5185\u6838\u65f6\uff0c\u4f1a\u6267\u884c\u8bbe\u7f6e\u7f13\u5b58\uff0c\u52a0\u8f7d\u9a71\u52a8\u7b49\u6b65\u9aa4\uff0c\u7136\u540e\u67e5\u627einit.rc\u6587\u4ef6\uff0c\u5e76\u542f\u52a8init\u8fdb\u7a0b\u3002 init\u8fdb\u7a0b\u2014\u20141\u53f7\u8fdb\u7a0b \u00b6 Linux\u5185\u6838\u542f\u52a8\u8fc7\u7a0b\u4e2d\u4f1a\u521b\u5efainit\u8fdb\u7a0b\uff0cinit\u8fdb\u7a0b\u662f\u7528\u6237\u7a7a\u95f4\u7684\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\uff08pid=1\uff09\uff0c\u5bf9\u5e94\u7684\u6e90\u6587\u4ef6\u4e3a\uff1a system/core/init/main.cpp \uff0c\uff08\u8fd9\u91cc\u8981\u8bf4\u660e\u4e00\u4e0b\uff0c\u5728\u5b89\u53538\u30019\u7248\u672c\u4e2d\uff0cinit\u7684\u6e90\u6587\u4ef6\u5728***system/core/init/init.cpp***\uff0c\u5728\u5b89\u535310\u300111\u4ee5\u53ca\u540e\u7684\u7248\u672c\u91cc\uff0cinit\u6e90\u6587\u4ef6\u8fc1\u79fb\u5230***main.cpp***\u4e2d\uff09\u5b83\u7684main\u65b9\u6cd5\u5982\u4e0b\uff1a int main ( int argc , char ** argv ) { #if __has_feature(address_sanitizer) __asan_set_error_report_callback ( AsanReportCallback ); #endif if ( ! strcmp ( basename ( argv [ 0 ]), \"ueventd\" )) { return ueventd_main ( argc , argv ); } if ( argc > 1 ) { if ( ! strcmp ( argv [ 1 ], \"subcontext\" )) { android :: base :: InitLogging ( argv , & android :: base :: KernelLogger ); const BuiltinFunctionMap & function_map = GetBuiltinFunctionMap (); return SubcontextMain ( argc , argv , & function_map ); } if ( ! strcmp ( argv [ 1 ], \"selinux_setup\" )) { return SetupSelinux ( argv ); } // \u5f53argc > 1\u65f6\u542f\u52a8\u7b2c\u4e8c\u9636\u6bb5\u51fd\u6570 if ( ! strcmp ( argv [ 1 ], \"second_stage\" )) { return SecondStageMain ( argc , argv ); } } //\u542f\u52a8\u7b2c\u4e00\u9636\u6bb5\u51fd\u6570 return FirstStageMain ( argc , argv ); } \u5148\u770b\u4e0b**FirstStageMain**\u8fd9\u4e2a\u51fd\u6570\uff1a\u5728***system/core/init/first_stage_init.cpp***\u4e2d int FirstStageMain ( int argc , char ** argv ) { ... //\u521b\u5efa\u548c\u6302\u8f7d\u542f\u52a8\u6240\u9700\u7684\u6587\u4ef6\u76ee\u5f55 CHECKCALL ( mount ( \"tmpfs\" , \"/dev\" , \"tmpfs\" , MS_NOSUID , \"mode=0755\" )); CHECKCALL ( mkdir ( \"/dev/pts\" , 0755 )); CHECKCALL ( mkdir ( \"/dev/socket\" , 0755 )); CHECKCALL ( mount ( \"devpts\" , \"/dev/pts\" , \"devpts\" , 0 , NULL )); #define MAKE_STR(x) __STRING(x) CHECKCALL ( mount ( \"proc\" , \"/proc\" , \"proc\" , 0 , \"hidepid=2,gid=\" MAKE_STR ( AID_READPROC ))); #undef MAKE_STR CHECKCALL ( chmod ( \"/proc/cmdline\" , 0440 )); ... CHECKCALL ( mount ( \"sysfs\" , \"/sys\" , \"sysfs\" , 0 , NULL )); CHECKCALL ( mount ( \"selinuxfs\" , \"/sys/fs/selinux\" , \"selinuxfs\" , 0 , NULL )); CHECKCALL ( mknod ( \"/dev/kmsg\" , S_IFCHR | 0600 , makedev ( 1 , 11 ))); ... return 1 ; } \u518d\u770b**SecondStageMain**\uff0c\u5bf9\u5e94\u76ee\u5f55\u5728\uff1a system/core/init/init.cpp int SecondStageMain ( int argc , char ** argv ) { //\u521d\u59cb\u5316\u5185\u6838\u65e5\u5fd7\u5904\u7406\u5de5\u5177 InitKernelLogging ( argv ); //\u521d\u59cb\u5316\u5c5e\u6027\u670d\u52a1 PropertyInit (); //\u542f\u52a8\u5c5e\u6027\u670d\u52a1 StartPropertyService ( & property_fd ); //\u89e3\u6790init.rc\u914d\u7f6e\u6587\u4ef6 LoadBootScripts ( am , sm ); return 0 ; } static void LoadBootScripts ( ActionManager & action_manager , ServiceList & service_list ) { Parser parser = CreateParser ( action_manager , service_list ); std :: string bootscript = GetProperty ( \"ro.boot.init_rc\" , \"\" ); if ( bootscript . empty ()) { parser . ParseConfig ( \"/system/etc/init/hw/init.rc\" ); ... } else { parser . ParseConfig ( bootscript ); } } \u4e0a\u9762\u4e24\u4e2a\u9636\u6bb5\u90fd\u5728init\u8fdb\u7a0b\u8fdb\u884c\uff0c\u6211\u4eec\u77e5\u9053init\u505a\u4e86\u4e00\u4e0b\u51e0\u4ef6\u4e8b\u60c5\uff1a \u521b\u5efa\u548c\u6302\u8f7d\u542f\u52a8\u6240\u9700\u7684\u6587\u4ef6\u76ee\u5f55 \u521d\u59cb\u5316\u5c5e\u6027\u670d\u52a1 \u542f\u52a8\u5c5e\u6027\u670d\u52a1 \u89e3\u6790**init.rc**\u914d\u7f6e\u6587\u4ef6\uff0c\u542f\u52a8zygote\u8fdb\u7a0b \u8fd9\u91cc\u91cd\u70b9\u770b\u4e0b**init.rc**\u914d\u7f6e\u6587\u4ef6\uff0c\u5927\u6982\u5185\u5bb9\u5982\u4e0b\uff1a import /init.environ.rc import /system/etc/init/hw/init.usb.rc import /init.${ro.hardware}.rc import /vendor/etc/init/hw/init.${ro.hardware}.rc import /system/etc/init/hw/init.usb.configfs.rc import /system/etc/init/hw/init.${ro.zygote}.rc on early-init write /proc/sys/kernel/sysrq 0 write /proc/sys/kernel/modprobe \\n ... service console /system/bin/sh class core console disabled user shell group shell log readproc seclabel u:r:shell:s0 setenv HOSTNAME console on property:ro.debuggable=1 chmod 0773 /data/misc/trace chmod 0775 /data/misc/wmtrace ... rc\u6587\u4ef6\u7531Android\u521d\u59cb\u5316\u8bed\u8a00\u7f16\u5199\uff0crc\u6587\u4ef6\u4e3b\u8981\u5305\u542bAction\u3001Service\u3001Command\u3001Options\u7b49\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u7531\u7279\u6b8a\u7684\u547d\u4ee4\u7ec4\u6210\u3002 \u5728\u5f00\u5934\u51e0\u884c\u4ee3\u7801\u4e2d\uff0cimport\u5bfc\u5165\u4e86\u51e0\u4e2arc\u6587\u4ef6\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u5728 ***system/core/rootdir***\u76ee\u5f55\u4e0b\u6709\u591a\u4e2ainit.xxx.rc\u6587\u4ef6\uff0c\u5176\u4e2dxxx\u6709zygote32\u548czygote64\u7b49\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u4e0d\u540c\u7684\u786c\u4ef6\u73af\u5883\u4e0b\uff0c\u9700\u8981\u5bfc\u5165\u76f8\u5e94\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u6bd4\u5982\u572864\u4f4d\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0cinit.zygote64.rc\u6587\u4ef6\u4f1a\u88ab\u5bfc\u5165\uff0c\u5b83\u7684\u5185\u5bb9\u5982\u4e0b\uff1a service zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server class main priority -20 user root group root readproc reserved_disk socket zygote stream 660 root system socket usap_pool_primary stream 660 root system onrestart exec_background - system system -- /system/bin/vdc volume abort_fuse onrestart write /sys/power/state on onrestart restart audioserver onrestart restart cameraserver onrestart restart media onrestart restart netd onrestart restart wificond writepid /dev/cpuset/foreground/tasks \u8fd9\u51e0\u884c\u4ee3\u7801\u8868\u793a\u542f\u52a8\u4e00\u4e2a\u540d\u5b57\u4e3azygote\u3001\u6267\u884c\u6587\u4ef6\u8def\u5f84\u4e3a\uff1a/system/bin/app_process64\u3001\u53c2\u6570\u4e3a-Xzygote /system/bin --zygote --start-system-server\u7684\u8fdb\u7a0b\u3002 \u9664\u4e86zygote\u8fdb\u7a0b\uff0c\u8fd8\u6709\u8bb8\u591a\u5173\u952e\u8fdb\u7a0b\u90fd\u662f\u7531init\u8fdb\u7a0b\u901a\u8fc7\u8bfb\u53d6\u76f8\u5e94\u7684rc\u6587\u4ef6\u8fdb\u884c\u542f\u52a8\u7684\uff0c\u5982 servicemanager\u3001surfaceflinger \u548c mediaserver \u8fdb\u7a0b\u7b49\u7b49\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u90fd\u662f\u4fdd\u8bc1\u7cfb\u7edf\u8fd0\u884c\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002\u81f3\u4e8e\u8fd9\u4e9b\u8fdb\u7a0b\u662f\u5982\u4f55\u542f\u52a8\u7684\u4eca\u5929\u5148\u4e0d\u505a\u51fa\u8bb2\u89e3\uff0c\u540e\u7eed\u4f1a\u9488\u5bf9\u6027\u8bb2\u89e3\u3002 Zygote\u8fdb\u7a0b\u2014\u2014Java\u8fdb\u7a0b\u7684\u59cb\u7956 \u00b6 \u4e0a\u9762\u8bf4\u4e86init\u8fdb\u7a0b\u4f1a\u89e3\u6790\u914d\u7f6e\u6587\u4ef6\uff0c\u542f\u52a8zygote\u8fdb\u7a0b\uff0c\u90a3\u4ec0\u4e48\u662fzygote\u8fdb\u7a0b\u5462\uff1f Zygote\u53c8\u79f0\u5b75\u5316\u5668\uff0c\u7528\u4e8e\u521b\u5efaDVM\u548cART\u3001\u5e94\u7528\u7a0b\u5e8f\u8fdb\u7a0b\u4ee5\u53ca\u8fd0\u884c\u7cfb\u7edf\u5173\u952e\u670d\u52a1\u7684SystemServer\u8fdb\u7a0b \u5de5\u4f5c\u539f\u7406 \u00b6 \u901a\u8fc7fork\u7684\u5f62\u5f0f\u6765\u521b\u5efa\u5e94\u7528\u7a0b\u5e8f\u8fdb\u7a0b\u548cSystemServer\u8fdb\u7a0b\uff0c Zygote\u7684 Java\u6846\u67b6\u5c42\u4e2d\u4f1a\u521b\u5efa\u4e00\u4e2aServer\u7aef\u7684Socket\uff0c\u8fd9\u4e2aSocket\u7528\u6765\u7b49\u5f85AMS\u8bf7\u6c42Zygote\u6765\u521b\u5efa\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u7a0b\u3002 \u542f\u52a8 \u00b6 Zygote\u542f\u52a8\u662f\u5728init.rc\u914d\u7f6e\u6587\u4ef6\u91cc\u9762\u8c03\u7528 \u7684\uff0c\u901a\u8fc7ro.zygote\u7684\u5c5e\u6027\u9009\u62e9\u5f15\u5165\u811a\u672c\uff0c\u4e3b\u65b9\u6cd5\u662fmain\u65b9\u6cd5\u3002 on nonencrypted class_start main class_start late_start \u6211\u4eec\u76f4\u63a5\u8fdb\u5165\u6e90\u7801\u770b\uff1a\u5728***frameworks/base/cmds/app_process/app_main.cpp***\u4e2d\uff1a int main ( int argc , char * const argv []) { ... AppRuntime runtime ( argv [ 0 ], computeArgBlockSize ( argc , argv )); ... if ( zygote ) { //\u8c03\u7528AppRuntime\u7684\u7236\u7c7bAndroidRuntime\u7684start\u65b9\u6cd5\u542f\u52a8zygote\u8fdb\u7a0b runtime . start ( \"com.android.internal.os.ZygoteInit\" , args , zygote ); } else if ( className ) { runtime . start ( \"com.android.internal.os.RuntimeInit\" , args , zygote ); } else { fprintf ( stderr , \"Error: no class name or --zygote supplied. \\n \" ); app_usage (); LOG_ALWAYS_FATAL ( \"app_process: no class name or --zygote supplied.\" ); } } \u6765\u770b\u770bstart\u505a\u4ec0\u4e48\u4e8b\u60c5\uff1a\u5728***frameworks/base/core/jni/AndroidRuntime.cpp***\uff1a void AndroidRuntime::start ( const char * className , const Vector < String8 >& options , bool zygote ) { ... /* start the virtual machine */ JniInvocation jni_invocation ; jni_invocation . Init ( NULL ); JNIEnv * env ; //\u542f\u52a8JVM if ( startVm ( & mJavaVM , & env , zygote , primary_zygote ) != 0 ) { return ; } onVmCreated ( env ); //\u4e3aJVM\u865a\u62df\u673a\u6ce8\u518cJNI\u65b9\u6cd5 if ( startReg ( env ) < 0 ) { ALOGE ( \"Unable to register all android natives \\n \" ); return ; } jclass stringClass ; jobjectArray strArray ; jstring classNameStr ; stringClass = env -> FindClass ( \"java/lang/String\" ); assert ( stringClass != NULL ); //\u521b\u5efa\u6570\u7ec4 strArray = env -> NewObjectArray ( options . size () + 1 , stringClass , NULL ); assert ( strArray != NULL ); //\u4eceapp_main\u7684main\u51fd\u6570\u5f97\u77e5classNameStr\u4e3a\uff1acom.android.internal.os.ZygoteInit classNameStr = env -> NewStringUTF ( className ); assert ( classNameStr != NULL ); env -> SetObjectArrayElement ( strArray , 0 , classNameStr ); for ( size_t i = 0 ; i < options . size (); ++ i ) { jstring optionsStr = env -> NewStringUTF ( options . itemAt ( i ). string ()); assert ( optionsStr != NULL ); env -> SetObjectArrayElement ( strArray , i + 1 , optionsStr ); } char * slashClassName = toSlashClassName ( className != NULL ? className : \"\" ); jclass startClass = env -> FindClass ( slashClassName ); if ( startClass == NULL ) { ALOGE ( \"JavaVM unable to locate class '%s' \\n \" , slashClassName ); /* keep going */ } else { //\u627e\u5230ZygoteInit\u7684main\u51fd\u6570 jmethodID startMeth = env -> GetStaticMethodID ( startClass , \"main\" , \"([Ljava/lang/String;)V\" ); if ( startMeth == NULL ) { ALOGE ( \"JavaVM unable to find main() in '%s' \\n \" , className ); /* keep going */ } else { //\u901a\u8fc7JNI\u8c03\u7528ZygoteInit\u7684main\u51fd\u6570 env -> CallStaticVoidMethod ( startClass , startMeth , strArray ); #if 0 if (env->ExceptionCheck()) threadExitUncaughtException(env); #endif } } ... } \u8fd9\u91cc\u662f\u4e00\u4e2aJNI\u8c03\u7528\uff0c\u6211\u4eec\u77e5\u9053\u662f\u5728ZygoteInit\u4e2d\uff0c\u8fd9\u80af\u5b9a\u662f\u4e00\u4e2ajava\u6587\u4ef6\u4e86\uff0c\u6765\u770b\u5728\u5b83\u54ea\u91cc\uff1a frameworks/base/core/java/com/android/internal/os/ZygoteInit.java public static void main ( String argv [] ) { try { if ( ! enableLazyPreload ) { ... //\u9884\u52a0\u8f7d\u7c7b\u548c\u8d44\u6e90 preload ( bootTimingsTraceLog ); ... } //\u521b\u5efaServer\u7aefsocket zygoteServer = new ZygoteServer ( isPrimaryZygote ); ... Log . i ( TAG , \"Accepting command socket connections\" ); if ( startSystemServer ) { //\u542f\u52a8system_server\u8fdb\u7a0b Runnable r = forkSystemServer ( abiList , zygoteSocketName , zygoteServer ); if ( r != null ) { r . run (); return ; } } //\u7b49\u5f85AMS\u8bf7\u6c42 caller = zygoteServer . runSelectLoop ( abiList ); } catch ( Throwable ex ) { Log . e ( TAG , \"System zygote died with exception\" , ex ); throw ex ; } finally { if ( zygoteServer != null ) { zygoteServer . closeServerSocket (); } } if ( caller != null ) { caller . run (); } } \u901a\u8fc7zygoteServer\u6765\u6267\u884crunSelectLoop\uff0c\u770b\u5230caller.run()\uff0c\u53ef\u77e5\u8fd9\u662f\u4e00\u4e2aRunnable\uff0c\u8fdbZygoteServer\u770b\u4e0b\uff1a frameworks/base/core/java/com/android/internal/os/ZygoteServer.java ZygoteServer ( boolean isPrimaryZygote ) { mUsapPoolEventFD = Zygote . getUsapPoolEventFD (); if ( isPrimaryZygote ) { //\u521b\u5efaSocket\u5ba2\u6237\u7aef mZygoteSocket = Zygote . createManagedSocketFromInitSocket ( Zygote . PRIMARY_SOCKET_NAME ); mUsapPoolSocket = Zygote . createManagedSocketFromInitSocket ( Zygote . USAP_POOL_PRIMARY_SOCKET_NAME ); } else { mZygoteSocket = Zygote . createManagedSocketFromInitSocket ( Zygote . SECONDARY_SOCKET_NAME ); mUsapPoolSocket = Zygote . createManagedSocketFromInitSocket ( Zygote . USAP_POOL_SECONDARY_SOCKET_NAME ); } mUsapPoolSupported = true ; fetchUsapPoolPolicyProps (); } Runnable runSelectLoop ( String abiList ) { ArrayList < FileDescriptor > socketFDs = new ArrayList <> (); ArrayList < ZygoteConnection > peers = new ArrayList <> (); //\u8fd9\u91cc\u7684mZygoteSocket\u5c31\u662f\u521a\u521a\u521b\u5efa\u7684\u670d\u52a1\u7aefocket socketFDs . add ( mZygoteSocket . getFileDescriptor ()); peers . add ( null ); mUsapPoolRefillTriggerTimestamp = INVALID_TIMESTAMP ; //\u5faa\u73af\u8bfb\u53d6\u72b6\u6001 while ( true ) { fetchUsapPoolPolicyPropsWithMinInterval (); mUsapPoolRefillAction = UsapPoolRefillAction . NONE ; int [] usapPipeFDs = null ; StructPollfd [] pollFDs ; ... int pollIndex = 0 ; for ( FileDescriptor socketFD : socketFDs ) { pollFDs [ pollIndex ] = new StructPollfd (); pollFDs [ pollIndex ] . fd = socketFD ; pollFDs [ pollIndex ] . events = ( short ) POLLIN ; ++ pollIndex ; } final int usapPoolEventFDIndex = pollIndex ; while ( -- pollIndex >= 0 ) { //\u8bfb\u53d6\u7684\u72b6\u6001\u4e0d\u662f\u5ba2\u6237\u7aef\u8fde\u63a5\u6216\u8005\u6570\u636e\u8bf7\u6c42\u65f6\uff0c\u8fdb\u5165\u4e0b\u4e00\u6b21\u5faa\u73af if (( pollFDs [ pollIndex ] . revents & POLLIN ) == 0 ) { continue ; } if ( pollIndex == 0 ) { //\u8868\u793a\u8ddf\u5ba2\u6237\u7aefSocket \u8fde\u63a5\u4e0a\u4e86 ZygoteConnection newPeer = acceptCommandPeer ( abiList ); peers . add ( newPeer ); socketFDs . add ( newPeer . getFileDescriptor ()); } else if ( pollIndex < usapPoolEventFDIndex ) { //\u8fd9\u91cc\u7684usapPoolEventFDIndex\u4e3asocketFD\u7684\u4e2a\u6570 try { //\u8868\u793a\u63a5\u6536\u5230\u5ba2\u6237\u7aef\u53d1\u8fc7\u6765\u7684\u8bf7\u6c42 ZygoteConnection connection = peers . get ( pollIndex ); //processOneCommand\u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u7a0b final Runnable command = connection . processOneCommand ( this ); if ( mIsForkChild ) { if ( command == null ) { throw new IllegalStateException ( \"command == null\" ); } return command ; } else { if ( command != null ) { throw new IllegalStateException ( \"command != null\" ); } ... } } } ... } } } \u8fd9\u91cc\u8fdb\u5165\u4e86ZygoteConnection\u8fd9\u4e2a\u7c7b\u4e2d\uff0c\u5177\u4f53\u76ee\u5f55\u5728\uff1a frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java Runnable processOneCommand ( ZygoteServer zygoteServer ) { String [] args ; try { //\u8bfb\u53d6socket\u5ba2\u6237\u7aef\u53d1\u9001\u8fc7\u6765\u7684\u53c2\u6570\u5217\u8868 args = Zygote . readArgumentList ( mSocketReader ); } catch ( IOException ex ) { throw new IllegalStateException ( \"IOException on command socket\" , ex ); } ... //\u5c06 socket \u5ba2\u6237\u7aef\u4f20\u9012\u8fc7\u6765\u7684\u53c2\u6570\uff0c\u89e3\u6790\u6210 Arguments \u5bf9\u8c61\u683c\u5f0f ZygoteArguments parsedArgs = new ZygoteArguments ( args ); ... //\u540c\u6837\u8c03\u7528Zygote\u7684forkAndSpecialize\u65b9\u6cd5fork\u51fa\u5b50\u8fdb\u7a0b pid = Zygote . forkAndSpecialize ( parsedArgs . mUid , parsedArgs . mGid , parsedArgs . mGids , parsedArgs . mRuntimeFlags , rlimits , parsedArgs . mMountExternal , parsedArgs . mSeInfo , parsedArgs . mNiceName , fdsToClose , fdsToIgnore , parsedArgs . mStartChildZygote , parsedArgs . mInstructionSet , parsedArgs . mAppDataDir , parsedArgs . mIsTopApp , parsedArgs . mPkgDataInfoList , parsedArgs . mWhitelistedDataInfoList , parsedArgs . mBindMountAppDataDirs , parsedArgs . mBindMountAppStorageDirs ); try { if ( pid == 0 ) { // in child zygoteServer . setForkChild (); zygoteServer . closeServerSocket (); IoUtils . closeQuietly ( serverPipeFd ); serverPipeFd = null ; //\u8fdb\u5165\u5b50\u8fdb\u7a0b\u6d41\u7a0b return handleChildProc ( parsedArgs , childPipeFd , parsedArgs . mStartChildZygote ); } else { // In the parent. A pid < 0 indicates a failure and will be handled in // handleParentProc. IoUtils . closeQuietly ( childPipeFd ); childPipeFd = null ; //\u8fdb\u5165\u7236\u8fdb\u7a0b\u6d41\u7a0b handleParentProc ( pid , serverPipeFd ); return null ; } } finally { IoUtils . closeQuietly ( childPipeFd ); IoUtils . closeQuietly ( serverPipeFd ); } } \u81f3\u6b64\uff0c Zygote\u542f\u52a8\u7684\u5168\u90e8\u6d41\u7a0b\u5df2\u7ecf\u8d70\u5b8c\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u8fdb\u5165\u5230system_server\u8fdb\u7a0b\u4e86\u3002 \u603b\u7ed3\uff1a \u00b6 Zygote\u8fdb\u7a0b\u542f\u52a8\u505a\u4e86\u54ea\u4e9b\u4e8b\u60c5\uff1a \u521b\u5efaAppRuntime\uff08\u7ee7\u627f\u81eaAndroidRuntime\uff09\uff0c\u5e76\u8c03\u7528\u5b83\u7684**start**\u65b9\u6cd5\u3002 \u5728AndroidRuntime\u4e2d\uff0c\u542f\u52a8JVM\u865a\u62df\u673a\uff0c\u5e76\u6ce8\u518cJNI\u65b9\u6cd5\uff0c\u901a\u8fc7JNI\u8c03\u7528\u8fdb\u5165ZygoteInit\u7684**main**\u51fd\u6570\uff08\u7b2c\u4e00\u6b21\u8fdb\u5165Java\u7684\u4e16\u754c\uff09 \u901a\u8fc7**ZygoteServer**\u6784\u9020\u51fd\u6570\u5efa\u7acbSocket\u901a\u9053\uff0c\u4f7fZygote\u8fdb\u7a0b\u6210\u4e3asocket\u670d\u52a1\u7aef\u3002\u5e76\u901a\u8fc7**runSelectLoop()** \u51fd\u6570\u7b49\u5f85AMS \u53d1\u9001\u8bf7\u6c42\u521b\u5efa\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u7a0b\u3002 \u8c03\u7528**forkSystemServer**()\u51fd\u6570fork\u51fasystem_server\u8fdb\u7a0b\u3002 system_server\u8fdb\u7a0b \u00b6 system_server\u8fdb\u7a0b\u627f\u8f7d\u4e86framework\u5c42\u7684\u6838\u5fc3\u4e1a\u52a1\u3002 system_server\u8fdb\u7a0b\u7531zygote\u542f\u52a8\uff0c\u7528\u4e8e\u521b\u5efaAMS\u3001WMS\u3001PMS\u7b49\u7cfb\u7edf\u670d\u52a1\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u4e00\u8d77\u901a\u8fc7\u6e90\u7801\u5206\u6790\u4e0bsystem_server\u8fdb\u7a0b\u7684\u542f\u52a8\u8fc7\u7a0b\u548c\u6267\u884c\u8fc7\u7a0b\u3002 system_server\u8fdb\u7a0b\u7684\u542f\u52a8\u8fc7\u7a0b \u00b6 \u4e0a\u9762\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0czgyote\u8fdb\u7a0b\u5728\u542f\u52a8\u7684\u65f6\u5019\u4f1a\u901a\u8fc7forkSystemServer\u6765fork\u51fa\u4e00\u4e2a\u53ebsystem_server\u7684\u8fdb\u7a0b\uff0c\u8fd4\u56de\u4e00\u4e2aRunnable\uff0c\u6765\u770b\u4ee3\u7801\uff1a private static Runnable forkSystemServer ( String abiList , String socketName , ZygoteServer zygoteServer ) { //\u542f\u52a8system_server\u7684\u547d\u4ee4\u884c\u53c2\u6570 String args [] = { \"--setuid=1000\" , \"--setgid=1000\" , \"--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1023,\" + \"1024,1032,1065,3001,3002,3003,3006,3007,3009,3010,3011\" , \"--capabilities=\" + capabilities + \",\" + capabilities , \"--nice-name=system_server\" , \"--runtime-args\" , \"--target-sdk-version=\" + VMRuntime . SDK_VERSION_CUR_DEVELOPMENT , \"com.android.server.SystemServer\" , }; ZygoteArguments parsedArgs = null ; int pid ; ... /* Request to fork the system server process */ pid = Zygote . forkSystemServer ( parsedArgs . mUid , parsedArgs . mGid , parsedArgs . mGids , parsedArgs . mRuntimeFlags , null , parsedArgs . mPermittedCapabilities , parsedArgs . mEffectiveCapabilities ); } catch ( IllegalArgumentException ex ) { throw new RuntimeException ( ex ); } /* For child process */ if ( pid == 0 ) { if ( hasSecondZygote ( abiList )) { waitForSecondaryZygote ( socketName ); } zygoteServer . closeServerSocket (); return handleSystemServerProcess ( parsedArgs ); } return null ; } \u6700\u7ec8\u8fd4\u56de\u4e86handleSystemServerProcess\u65b9\u6cd5\u3002 private static Runnable handleSystemServerProcess ( ZygoteArguments parsedArgs ) { ... if ( parsedArgs . mInvokeWith != null ) { ... } else { ClassLoader cl = null ; if ( systemServerClasspath != null ) { cl = createPathClassLoader ( systemServerClasspath , parsedArgs . mTargetSdkVersion ); Thread . currentThread (). setContextClassLoader ( cl ); } /* * Pass the remaining arguments to SystemServer. */ return ZygoteInit . zygoteInit ( parsedArgs . mTargetSdkVersion , parsedArgs . mDisabledCompatChanges , parsedArgs . mRemainingArgs , cl ); } /* should never reach here */ } public static final Runnable zygoteInit ( int targetSdkVersion , long [] disabledCompatChanges , String [] argv , ClassLoader classLoader ) { if ( RuntimeInit . DEBUG ) { Slog . d ( RuntimeInit . TAG , \"RuntimeInit: Starting application from zygote\" ); } Trace . traceBegin ( Trace . TRACE_TAG_ACTIVITY_MANAGER , \"ZygoteInit\" ); RuntimeInit . redirectLogStreams (); RuntimeInit . commonInit (); //\u901a\u8fc7Native\u5c42\u4e2dAndroidRuntime.cpp\u7684JNI\u65b9\u6cd5\u6700\u7ec8\u8c03\u7528app_main.cpp\u7684onZygoteInit\u65b9\u6cd5\uff0c //\u542f\u52a8Binder\u7ebf\u7a0b\u6c60\uff0c\u4f7fsystem_server\u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528Binder\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u901a\u4fe1 ZygoteInit . nativeZygoteInit (); //\u7ee7\u7eed\u5f80\u4e0b\u8c03\u7528 return RuntimeInit . applicationInit ( targetSdkVersion , disabledCompatChanges , argv , classLoader ); } \u8fdb\u5165RuntimeInit\u7684applicationInit\u65b9\u6cd5\u770b\u4e0b\uff1a protected static Runnable applicationInit ( int targetSdkVersion , long [] disabledCompatChanges , String [] argv , ClassLoader classLoader ) { ... return findStaticMain ( args . startClass , args . startArgs , classLoader ); } \u8c03\u7528findStaticMain\uff1a protected static Runnable findStaticMain ( String className , String [] argv , ClassLoader classLoader ) { Class <?> cl ; try { // \u901a\u8fc7\u53cd\u5c04\u5f97\u5230SystemServer\u7c7b cl = Class . forName ( className , true , classLoader ); } catch ( ClassNotFoundException ex ) { throw new RuntimeException ( \"Missing class when invoking static main \" + className , ex ); } Method m ; try { //\u4eceSystemServer\u7c7b\u4e2d\u62ff\u5230main\u65b9\u6cd5 m = cl . getMethod ( \"main\" , new Class [] { String [] . class }); } catch ( NoSuchMethodException ex ) { throw new RuntimeException ( \"Missing static main on \" + className , ex ); } catch ( SecurityException ex ) { throw new RuntimeException ( \"Problem getting static main on \" + className , ex ); } int modifiers = m . getModifiers (); if ( ! ( Modifier . isStatic ( modifiers ) && Modifier . isPublic ( modifiers ))) { throw new RuntimeException ( \"Main method is not public and static on \" + className ); } /* * This throw gets caught in ZygoteInit.main(), which responds * by invoking the exception's run() method. This arrangement * clears up all the stack frames that were required in setting * up the process. */ return new MethodAndArgsCaller ( m , argv ); } static class MethodAndArgsCaller implements Runnable { /** method to call */ private final Method mMethod ; /** argument array */ private final String [] mArgs ; public MethodAndArgsCaller ( Method method , String [] args ) { mMethod = method ; mArgs = args ; } public void run () { try { // \u8c03\u7528\u4f20\u9012\u8fc7\u6765\u7684mMethod mMethod . invoke ( null , new Object [] { mArgs }); } catch ( IllegalAccessException ex ) { throw new RuntimeException ( ex ); } catch ( InvocationTargetException ex ) { Throwable cause = ex . getCause (); if ( cause instanceof RuntimeException ) { throw ( RuntimeException ) cause ; } else if ( cause instanceof Error ) { throw ( Error ) cause ; } throw new RuntimeException ( ex ); } } } \u8fd9\u6837\uff0csystem_sever\u8fdb\u7a0b\u5c31\u542f\u52a8\u8d77\u6765\u4e86\uff0c\u5e76\u4e14\u8fdb\u5165\u4e86SystemServer.java\u7684main\u65b9\u6cd5\u3002 \u6ce8\u610f\u4e00\u4e0b\u4e0a\u9762\u90a3\u6bb5\u6ce8\u91ca\uff1a This throw gets caught in ZygoteInit.main(), which responds by invoking the exception's run() method. This arrangement clears up all the stack frames that were required in setting up the process. \u5728\u6700\u65b0\u7684\u7248\u672c\u91cc\uff0c\u5c06MethodAndArgsCaller\u5bf9\u8c61\u4f5c\u4e3a\u8fd4\u56de\u503c\u8fd4\u56de\uff0c\u6700\u540e\u5728ZygoteInit\u7684caller.run()\u65b9\u6cd5\u91cc\uff0c\u8fd9\u4e2a\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u6267\u884c\u4e86\u8fd4\u56de\u8fc7\u7a0b\uff0c\u81ea\u7136\u5728\u5806\u6808\u4e2d\u5bf9\u5e94\u7684\u6808\u5e27\u4e5f\u88ab\u5f39\u51fa\u6808\u4e86\u3002 if ( caller != null ) { caller . run (); } system_server\u8fdb\u7a0b\u7684\u6267\u884c\u8fc7\u7a0b \u00b6 \u5728\uff1a frameworks/base/services/java/com/android/server/SystemServer.java /** * The main entry point from zygote. */ public static void main ( String [] args ) { new SystemServer (). run (); } \u6211\u4eec\u4ece\u6ce8\u91ca\u4e2d\u4e5f\u80fd\u770b\u5230\uff1a\u8fd9\u4e2a\u662f\u8fdb\u5165system_server\u8fdb\u7a0b\u7684\u5165\u53e3\uff0c\u8c03\u7528run()\u65b9\u6cd5 private void run () { ... // \u52a0\u8f7dlibandroid_servers.so System . loadLibrary ( \"android_servers\" ); ... // \u521b\u5efa SystemContext createSystemContext (); // \u521b\u5efa SystemServiceManager mSystemServiceManager = new SystemServiceManager ( mSystemContext ); LocalServices . addService ( SystemServiceManager . class , mSystemServiceManager ); SystemServerInitThreadPool . start (); ... // Start services. try { t . traceBegin ( \"StartServices\" ); //\u542f\u52a8\u5f15\u5bfc\u670d\u52a1 startBootstrapServices ( t ); //\u542f\u52a8\u6838\u5fc3\u670d\u52a1 startCoreServices ( t ); //\u542f\u52a8\u5176\u4ed6\u670d\u52a1 startOtherServices ( t ); } catch ( Throwable ex ) { ... } finally { t . traceEnd (); // StartServices } ... } \u53ef\u4ee5\u770b\u5230\uff0c\u5728run\u65b9\u6cd5\u4e2d\uff0c\u4e3b\u8981\u6267\u884c\u4e86\u542f\u52a8\u5f15\u5bfc\u670d\u52a1\u3001\u6838\u5fc3\u670d\u52a1\u3001\u5176\u4ed6\u670d\u52a1\u7684\u4efb\u52a1\uff0c\u4e0b\u9762\u901a\u8fc7\u8868\u683c\u5217\u4e3e\u4e00\u4e9b\u670d\u52a1\uff1a \u5f15\u5bfc\u670d\u52a1 \u4f5c\u7528 Installer \u7cfb\u7edf\u5b89\u88c5apk\u65f6\u7684\u4e00\u4e2a\u670d\u52a1\u7c7b\uff0c\u542f\u52a8\u5b8c\u6210Installer\u670d\u52a1\u4e4b\u540e\u624d\u80fd\u542f\u52a8\u5176\u4ed6\u7684\u7cfb\u7edf\u670d\u52a1 ActivityManagerService \u8d1f\u8d23\u56db\u5927\u7ec4\u4ef6\u7684\u542f\u52a8\u3001\u5207\u6362\u3001\u8c03\u5ea6\u3002 PowerManagerService \u8ba1\u7b97\u7cfb\u7edf\u4e2d\u548cPower\u76f8\u5173\u7684\u8ba1\u7b97\uff0c\u7136\u540e\u51b3\u7b56\u7cfb\u7edf\u5e94\u8be5\u5982\u4f55\u53cd\u5e94 DisplayManagerService \u7528\u6765\u7ba1\u7406\u6240\u6709\u663e\u793a\u8bbe\u5907 UserManagerService \u591a\u7528\u6237\u6a21\u5f0f\u7ba1\u7406 SensorService \u4e3a\u7cfb\u7edf\u63d0\u4f9b\u5404\u79cd\u611f\u5e94\u5668\u670d\u52a1 PackageManagerService \u7528\u6765\u5bf9apk\u8fdb\u884c\u5b89\u88c5\u3001\u89e3\u6790\u3001\u5220\u9664\u3001\u5378\u8f7d\u7b49\u7b49\u64cd\u4f5c LightsService \u7ba1\u7406\u548c\u663e\u793a\u80cc\u5149LED \u6838\u5fc3\u670d\u52a1 BatteryService \u7ba1\u7406\u7535\u6c60\u76f8\u5173\u7684\u670d\u52a1 UsageStatsService \u6536\u96c6\u7528\u6237\u4f7f\u7528\u6bcf\u4e00\u4e2aAPP\u7684\u9891\u7387\u3001\u4f7f\u7528\u65f6\u5e38 WebViewUpdateService WebView\u66f4\u65b0\u670d\u52a1 \u5176\u4ed6\u670d\u52a1 CameraService \u6444\u50cf\u5934\u76f8\u5173\u670d\u52a1 AlarmManagerService \u5168\u5c40\u5b9a\u65f6\u5668\u7ba1\u7406\u670d\u52a1 InputManagerService \u7ba1\u7406\u8f93\u5165\u4e8b\u4ef6 WindowManagerService \u7a97\u53e3\u7ba1\u7406\u670d\u52a1 VrManagerService VR\u6a21\u5f0f\u7ba1\u7406\u670d\u52a1 BluetoothService \u84dd\u7259\u7ba1\u7406\u670d\u52a1 NotificationManagerService \u901a\u77e5\u7ba1\u7406\u670d\u52a1 DeviceStorageMonitorService \u5b58\u50a8\u76f8\u5173\u7ba1\u7406\u670d\u52a1 LocationManagerService \u5b9a\u4f4d\u7ba1\u7406\u670d\u52a1 AudioService \u97f3\u9891\u76f8\u5173\u7ba1\u7406\u670d\u52a1 \u901a\u8fc7\u4e0a\u9762\u7684\u6d41\u7a0b\uff0csystem_server\u8fdb\u7a0b\u5c31\u542f\u52a8\u8d77\u6765\u4e86\uff0c\u5e76\u4e14\u542f\u52a8\u4e86\u5404\u79cd\u670d\u52a1\u3002 \u603b\u7ed3\uff1a \u00b6 system_server\u8fdb\u7a0b\u5728\u542f\u52a8\u8fc7\u7a0b\u4e2d\u5b8c\u6210\u7684\u5de5\u4f5c\u5206\u522b\u662f\uff1a \u542f\u52a8Binder\u7ebf\u7a0b\u6c60\uff0c\u5efa\u7acb\u8fdb\u7a0b\u95f4\u901a\u4fe1\u3002 \u521b\u5efa SystemServiceManager\uff0c\u7528\u4e8e\u5bf9\u7cfb\u7edf\u670d\u52a1\u8fdb\u884c\u521b\u5efa\u3001\u542f\u52a8\u548c\u751f\u547d\u5468\u671f\u7ba1\u7406\u3002 \u542f\u52a8\u5f15\u5bfc\u670d\u52a1\u3001\u6838\u5fc3\u670d\u52a1\u3001\u5176\u4ed6\u670d\u52a1\u7b49\u3002 Launcher\u2014\u2014Android\u7cfb\u7edf\u7684 \u201c\u684c\u9762\u201d \u00b6 \u5982\u679c\u4f60\u4e0d\u77e5\u9053\u4ec0\u4e48\u662fLauncher\u7684\u8bdd\uff0c\u770b\u5230\u4e0a\u9762\u7684\u9875\u9762\u5c31\u5e94\u8be5\u77e5\u9053\u4e86\uff0cLauncher\u5176\u5b9e\u5c31\u662f\u684c\u9762\uff0c\u662f\u4e00\u4e2a\u7cfb\u7edfapp\uff0c\u684c\u9762\u4e0a\u7684\u56fe\u6807\u5219\u662f\u542f\u52a8\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u56fe\u6807\u542f\u52a8\u5bf9\u5e94\u7684app\u3002 Launcher\u7684\u542f\u52a8 \u00b6 \u4e0a\u6587\u4e2d\u6211\u4eec\u77e5\u9053 Zygote\u8fdb\u7a0b\u542f\u52a8\u4e86SystemServer\u8fdb\u7a0b\uff0c\u800c\u542f\u52a8Launcher\u7684\u5165\u53e3\u4e3aAMS\u7684systemReady\u65b9\u6cd5\uff0c\u5728SystemServer\u7684startOtherServices\u65b9\u6cd5\u4e2d\u88ab\u8c03\u7528\uff0c\u6211\u4eec\u770b\u4e0bstartOtherServices\uff1a private void startOtherServices ( @NonNull TimingsTraceAndSlog t ) { ... mActivityManagerService . systemReady (() -> { Slog . i ( TAG , \"Making services ready\" ); t . traceBegin ( \"StartActivityManagerReadyPhase\" ); mSystemServiceManager . startBootPhase ( t , SystemService . PHASE_ACTIVITY_MANAGER_READY ); ... }) } \u8c03\u7528AMS\u7684systemReady()\u65b9\u6cd5\uff0c\u6211\u4eec\u8fdb\u5165AMS\u770b\u4e0b\uff1a frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java public void systemReady ( final Runnable goingCallback , @NonNull TimingsTraceAndSlog t ) { ... t . traceBegin ( \"resumeTopActivities\" ); mAtmInternal . resumeTopActivities ( false /* scheduleIdle */ ); t . traceEnd (); ... } \u8fd9\u4e2a\u5730\u65b9\u5404\u7248\u672c\u6709\u5dee\u5f02 \uff1a \u5728\u5b89\u53538\u30019\u7248\u672c\u4e0a\u662f\u901a\u8fc7\u8c03\u7528ActivityStackSupervisor\u7684resumeFocusedStackTopActivityLocked\uff08\uff09\u65b9\u6cd5 \u800c\u5b89\u535310\u300111\u7248\u672c\u91cc\u5219\u662f\u4ea4\u7ed9\u4e86ActivityTaskManagerInternal\uff0c\u901a\u8fc7\u8c03\u7528resumeTopActivities\uff08\uff09\u65b9\u6cd5\u3002 \u6211\u662f\u6574\u4f53\u57fa\u4e8eAndroid11\u5206\u6790\u7684\u6d41\u7a0b\uff0c\u6240\u4ee5\u5bf9\u524d\u9762\u7248\u672c\u611f\u5174\u8da3\u7684\u540c\u5b66\uff0c\u53ef\u4ee5\u4e0b\u8f7d\u5bf9\u5e94\u7684\u6e90\u7801\u6765\u6df1\u5165\u4e86\u89e3\uff0c\u73b0\u5728\u6211\u4eec\u8fdb\u5165resumeTopActivities\u65b9\u6cd5\u770b\u4e0b\uff1a frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerInternal.java public abstract class ActivityTaskManagerInternal { ... public abstract void resumeTopActivities ( boolean scheduleIdle ); ... } \u8fd9\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u90a3\u5b83\u7684\u5b9e\u73b0\u7c7b\u5728\u54ea\u91cc\u5462\uff1f\u6211\u4eec\u6ce8\u610f\u5230\u5728AMS\u7684\u6784\u9020\u65b9\u6cd5\u4e2d\uff1a mAtmInternal = LocalServices . getService ( ActivityTaskManagerInternal . class ); LocalServices\u7c7b\u91cc\u9762\u662f\u4e00\u4e2a\u7c7b\u4e0e\u5bf9\u8c61\u7684\u952e\u503c\u5bf9\uff0c\u6211\u4eec\u627e\u5230\u5b83\u7684\u552f\u4e00\u7ee7\u627f\u7c7bActivityTaskManagerService.LocalService frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java public class ActivityTaskManagerService extends IActivityTaskManager . Stub { ... RootWindowContainer mRootWindowContainer ; final class LocalService extends ActivityTaskManagerInternal { ... @Override public void resumeTopActivities ( boolean scheduleIdle ) { synchronized ( mGlobalLock ) { mRootWindowContainer . resumeFocusedStacksTopActivities (); if ( scheduleIdle ) { mStackSupervisor . scheduleIdle (); } } } ... } } \u8fd9\u91cc\u8c03\u7528\u4e86RootWindowContainer\u7684resumeFocusedStacksTopActivities\u65b9\u6cd5 boolean resumeFocusedStacksTopActivities ( ActivityStack targetStack , ActivityRecord target , ActivityOptions targetOptions ) { ... for ( int displayNdx = getChildCount () - 1 ; displayNdx >= 0 ; -- displayNdx ) { boolean resumedOnDisplay = false ; ... if ( ! resumedOnDisplay ) { final ActivityStack focusedStack = display . getFocusedStack (); if ( focusedStack != null ) { result |= focusedStack . resumeTopActivityUncheckedLocked ( target , targetOptions ); } else if ( targetStack == null ) { result |= resumeHomeActivity ( null /* prev */ , \"no-focusable-task\" , display . getDefaultTaskDisplayArea ()); } } } return result ; } \u8fd9\u91cc\u770b\u4e0b\uff1a \u5f53focusedStack\u4e3anull\u65f6\uff0c\u76f4\u63a5\u542f\u52a8resumeHomeActivity\u3002 \u63a5\u4e0b\u6765\u53c8\u8d70\u5230\u4e86ActivityStack\uff1a boolean resumeTopActivityUncheckedLocked ( ActivityRecord prev , ActivityOptions options ) { ... result = resumeTopActivityInnerLocked ( prev , options ); ... return result ; } private boolean resumeTopActivityInnerLocked ( ActivityRecord prev , ActivityOptions options ) { ... if ( ! hasRunningActivity ) { // There are no activities left in the stack, let's look somewhere else. return resumeNextFocusableActivityWhenStackIsEmpty ( prev , options ); } ... } \u53c8\u8c03\u7528\u4e86resumeNextFocusableActivityWhenStackIsEmpty\uff1a private boolean resumeNextFocusableActivityWhenStackIsEmpty ( ActivityRecord prev , ActivityOptions options ) { .... return mRootWindowContainer . resumeHomeActivity ( prev , reason , getDisplayArea ()); } \u515c\u515c\u8f6c\u8f6c\uff0c\u53c8\u8fd4\u56de\u5230RootWindowContainer\u7c7b\u4e2d\uff0c\u8c03\u7528\u4e86resumeHomeActivity\u65b9\u6cd5\uff0c\u6211\u4eec\u56de\u5230\u8fd9\u4e2a\u7c7b \u770b\u4e0b\uff1a frameworks/base/services/core/java/com/android/server/wm/RootWindowContainer.java boolean resumeHomeActivity ( ActivityRecord prev , String reason , TaskDisplayArea taskDisplayArea ) { ... return startHomeOnTaskDisplayArea ( mCurrentUser , myReason , taskDisplayArea , false /* allowInstrumenting */ , false /* fromHomeKey */ ); } \u8d70\u5230\u4e86startHomeOnTaskDisplayArea\u65b9\u6cd5 boolean startHomeOnTaskDisplayArea ( int userId , String reason , TaskDisplayArea taskDisplayArea , boolean allowInstrumenting , boolean fromHomeKey ) { ... mService . getActivityStartController (). startHomeActivity ( homeIntent , aInfo , myReason , taskDisplayArea ); return true ; } \u901a\u8fc7ActivityTaskManagerService\u83b7\u53d6\u5230\u63a7\u5236\u5668\uff0c\u8fd9\u4e2a\u63a7\u5236\u5668\u5c31\u662fActivityStartController\uff0c\u542f\u52a8HomeActivity\uff1a frameworks/base/services/core/java/com/android/server/wm/ActivityStartController.java void startHomeActivity ( Intent intent , ActivityInfo aInfo , String reason , TaskDisplayArea taskDisplayArea ) { final ActivityOptions options = ActivityOptions . makeBasic (); options . setLaunchWindowingMode ( WINDOWING_MODE_FULLSCREEN ); if ( ! ActivityRecord . isResolverActivity ( aInfo . name )) { // The resolver activity shouldn't be put in home stack because when the foreground is // standard type activity, the resolver activity should be put on the top of current // foreground instead of bring home stack to front. options . setLaunchActivityType ( ACTIVITY_TYPE_HOME ); } final int displayId = taskDisplayArea . getDisplayId (); options . setLaunchDisplayId ( displayId ); options . setLaunchTaskDisplayArea ( taskDisplayArea . mRemoteToken . toWindowContainerToken ()); // The home activity will be started later, defer resuming to avoid unneccerary operations // (e.g. start home recursively) when creating home stack. mSupervisor . beginDeferResume (); final ActivityStack homeStack ; try { // Make sure home stack exists on display area. homeStack = taskDisplayArea . getOrCreateRootHomeTask ( ON_TOP ); } finally { mSupervisor . endDeferResume (); } mLastHomeActivityStartResult = obtainStarter ( intent , \"startHomeActivity: \" + reason ) . setOutActivity ( tmpOutRecord ) . setCallingUid ( 0 ) . setActivityInfo ( aInfo ) . setActivityOptions ( options . toBundle ()) . execute (); mLastHomeActivityStartRecord = tmpOutRecord [ 0 ] ; if ( homeStack . mInResumeTopActivity ) { mSupervisor . scheduleResumeTopActivities (); } } ActivityStarter obtainStarter ( Intent intent , String reason ) { return mFactory . obtain (). setIntent ( intent ). setReason ( reason ); } Launcher\u542f\u52a8Activity \u00b6 Launcher\u901a\u8fc7startActivitySafely\u65b9\u6cd5\u542f\u52a8Activity packages/apps/Launcher3/src/com/android/launcher3/Launcher.java @Override public boolean startActivitySafely ( View v , Intent intent , ItemInfo item , @Nullable String sourceContainer ) { if ( ! hasBeenResumed ()) { addOnResumeCallback (() -> startActivitySafely ( v , intent , item , sourceContainer )); if ( mOnDeferredActivityLaunchCallback != null ) { mOnDeferredActivityLaunchCallback . run (); mOnDeferredActivityLaunchCallback = null ; } return true ; } boolean success = super . startActivitySafely ( v , intent , item , sourceContainer ); if ( success && v instanceof BubbleTextView ) { // This is set to the view that launched the activity that navigated the user away // from launcher. Since there is no callback for when the activity has finished // launching, enable the press state and keep this reference to reset the press // state when we return to launcher. BubbleTextView btv = ( BubbleTextView ) v ; btv . setStayPressed ( true ); addOnResumeCallback ( btv ); } return success ; } Launcher\u542f\u52a8\u65f6\u5e8f\u56fe\u5982\u4e0b\uff1a \u603b\u7ed3\uff1a \u9996\u5148system_server\u901a\u8fc7AMS\u542f\u52a8Launcher AMS\u8c03\u7528\u4e86ActivityTaskManagerInternal\u7684resumeTopActivities\u65b9\u6cd5 \u5728RootWindowContainer\u5904\u7406\u663e\u793a\u76f8\u5173\u4e8b\u60c5\uff0c\u7136\u540e\u4f7f\u7528ActivityStack\u5904\u7406\u4e00\u4e9b\u5806\u6808\u76f8\u5173\u7684\u5de5\u4f5c\uff0c\u518d\u8c03\u7528RootActivityContainer\u7684resumeHomeActivity\u65b9\u6cd5\u3002\uff08\u5982\u679cActivityStack\u6ca1\u627e\u5230\uff0c\u5219\u76f4\u63a5\u8c03\u7528resumeHomeActivity\uff09 \u4f7f\u7528 ActivityStartController\u542f\u52a8Launcher Activity \u7ecf\u8fc7init\u8fdb\u7a0b\u3001zygote\u8fdb\u7a0b\u3001system_server\u8fdb\u7a0b\u3001launcher\u8fdb\u7a0b\u7684\u5206\u6790\uff0c\u6211\u4eec\u7ec8\u4e8e\u770b\u5230\u4e86\u7ed3\u679c \u5728AMS\u90a3\u5757\uff0c2\u4e07\u591a\u884c\u7684\u4ee3\u7801\uff0c\u770b\u7684\u6211\u6655\u5934\u8f6c\u5411\uff0c\u4e0d\u77e5\u9053\u600e\u4e48\u5f80\u4e0b\u8d70\uff0c\u597d\u5728\u6162\u6162\u7406\u6e05\u4e86\u601d\u8def\uff0c\u8fd9\u5757\u786e\u5b9e\u6709\u70b9\u96be\u7406\u89e3\uff0c\u540e\u7eed\u8fd8\u8981\u591a\u52a0\u6df1\u8bb0\u5fc6\u3002 \u8fdb\u5165\u684c\u9762\u540e\uff0c\u6574\u4e2a\u5b89\u5353\u7cfb\u7edf\u5c31\u542f\u52a8\u5b8c\u6210\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\uff1a \u6309\u4e0b\u7535\u6e90\uff0cROM\u4e2d\u7684Bootloader\u4f1a\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d Bootloader\u521d\u59cb\u5316\u8f6f\u786c\u4ef6\u73af\u5883\u540e\uff0c\u542f\u52a8Linux\u5185\u6838 Linux\u5185\u6838\u542f\u52a8\u4f1a\u505a\u8bbe\u7f6e\u7f13\u5b58\u3001\u52a0\u8f7d\u9a71\u52a8\u7b49\u4e00\u7cfb\u5217\u64cd\u4f5c\uff0c\u542f\u52a8\u5b8c\u6210\u540e\u4f1a\u542f\u52a8init\u8fdb\u7a0b init\u8fdb\u7a0b\u4f1a\u521d\u59cb\u5316\u5c5e\u6027\u670d\u52a1\uff0c\u5e76\u4e14\u89e3\u6790init.rc\u6587\u4ef6\uff0c\u542f\u52a8zygote\u8fdb\u7a0b zygote\u8fdb\u7a0b\u542f\u52a8\u4f1a\u521b\u5efaJVM\uff0c\u5e76\u4e3a\u5176\u6ce8\u518cJNI\u51fd\u6570\uff0c\u7136\u540e\u521b\u5efa\u670d\u52a1\u7aefSocket\uff0c\u542f\u52a8system_server\u8fdb\u7a0b system_server\u8fdb\u7a0b\u542f\u52a8\u4f1a\u521b\u5efaBinder\u7ebf\u7a0b\u6c60\uff0c\u4f7f\u5176\u5177\u5907IPC\u80fd\u529b\uff0c\u7136\u540e\u542f\u52a8AMS\u3001PMS\u3001WMS\u7b49\u5404\u79cd\u670d\u52a1 AMS\u542f\u52a8Launcher\uff0cLauncher\u88ab\u542f\u52a8\u540e\u4f1a\u5c06\u5df2\u5b89\u88c5\u7684\u5e94\u7528\u56fe\u7247\u663e\u793a\u5728\u754c\u9762\u4e0a\u3002 \u4e00\u4e2a\u590d\u6742\u7684Android\u7cfb\u7edf\u542f\u52a8\u5c31\u662f\u8fd9\u4e48\u8fd0\u884c\u8d77\u6765\u7684\uff0c\u770b\u4f3c\u7b80\u5355\uff0c\u5176\u5b9e\u5206\u6790\u8fc7\u540e\u624d\u53d1\u73b0\uff0c\u91cc\u9762\u6709\u5f88\u591a\u5927\u5927\u5c0f\u5c0f\u7684\u6d41\u7a0b\uff0c\u672c\u4eba\u80fd\u529b\u6709\u9650\uff0c\u5728\u5206\u6790\u8fc7\u7a0b\u4e2d\uff0c\u4ee3\u7801\u6709\u6240\u5220\u51cf\uff0c\u5982\u679c\u6587\u7ae0\u4e2d\u6709\u5199\u5f97\u4e0d\u5bf9\u7684\u5730\u65b9\uff0c\u6b22\u8fce\u5728\u7559\u8a00\u533a\u7559\u8a00\u5927\u5bb6\u4e00\u8d77\u8ba8\u8bba\uff0c\u5171\u540c\u5b66\u4e60\u8fdb\u6b65\u3002\u5982\u679c\u89c9\u5f97\u6211\u7684\u6587\u7ae0\u7ed9\u4e88\u4f60\u5e2e\u52a9\uff0c\u4e5f\u8bf7\u7ed9\u6211\u4e00\u4e2a\u559c\u6b22\u548c\u5173\u6ce8\u3002","title":"Android\u7cfb\u7edf\u542f\u52a8\u6d41\u7a0b"},{"location":"android/android_startup/#android","text":"","title":"Android\u7cfb\u7edf\u542f\u52a8\u6d41\u7a0b"},{"location":"android/android_startup/#_1","text":"\u4e86\u89e3Android\u7cfb\u7edf\u542f\u52a8\uff0c\u6700\u76f4\u63a5\u7684\u65b9\u5f0f\u5c31\u662f\u62ff\u4e00\u53f0\u624b\u673a\uff0c\u5f53\u6211\u4eec\u8981\u5f00\u673a\u4f7f\u7528\u65f6\uff0c\u9700\u8981\u600e\u4e48\u505a\uff1f\u8fd9\u4e2a\u95ee\u9898\u770b\u8d77\u6765\u5f88\u65e0\u77e5\uff0c\u4f46\u51e1\u73a9\u8fc7\u624b\u673a\u7684\u4eba\u90fd\u77e5\u9053\uff0c\u6309\u7535\u6e90\u952e\u5f00\u673a\u561b\u3002\u5bf9\uff0c\u662f\u6309\u7535\u6e90\u952e\u5f00\u673a\uff0c\u5c4f\u5e55\u4f1a\u5f39\u51fa\u624b\u673a\u54c1\u724clogo\uff0c\u8fc7\u4e00\u4f1a\u5c31\u8fdb\u5165\u684c\u9762\u4e86\u3002\u8fd9\u662f\u6211\u4eec\u6240\u770b\u5230\u7684\u73b0\u8c61\uff0c\u4f60\u53ef\u77e5\u9053\u5176\u4e2d\u7684\u7f18\u7531\u5417\uff1f\u867d\u7136\u73b0\u8c61\u5f88\u7b80\u5355\uff0c\u8fc7\u7a0b\u4e5f\u5f88\u5feb\uff0c\u4f46\u662f\u91cc\u9762\u662f\u901a\u8fc7\u591a\u5c11\u4e2a\u6d41\u7a0b\u8d70\u5230\u684c\u9762\u8fd9\u4e00\u6b65\u5462\uff0c\u4eca\u5929\u5c31\u5e26\u5927\u5bb6\u6765\u5206\u6790\u4e0b\u8fd9\u770b\u4f3c\u7b80\u5355\uff0c\u4f46\u53c8\u4e0d\u7b80\u5355\u7684\u542f\u52a8\u6d41\u7a0b\u3002 \u65e2\u7136\u8981\u5206\u6790\u6d41\u7a0b\uff0c\u90a3\u6211\u4eec\u5c31\u4ece\u6700\u5f00\u59cb\uff08\u6309\u7535\u6e90\u952e\u5f00\u59cb\uff09\u6765\u5206\u6790\uff0c\u5f53\u6211\u4eec\u6309\u4e0b\u7535\u6e90\u952e\uff0c\u4f1a\u6267\u884c\u54ea\u4e9b\u6307\u4ee4\uff0c\u8c03\u7528\u54ea\u4e9b\u6d41\u7a0b\uff0c\u4e00\u8d77\u6765\u770b\uff1a \u6709\u4e24\u79cd\u6309\u952e\u65b9\u5f0f\u80fd\u591f\u542f\u52a8\u7cfb\u7edf\uff0c\u957f\u6309\u7535\u6e90\u952e\u548c\u7535\u6e90\u952e+\u97f3\u91cf\u4e0b\u952e\uff0c\u957f\u6309\u7535\u6e90\u952e\u8fdb\u5165\u7684\u662fBootLoader\u6a21\u5f0f\uff0c\u800c\u7535\u6e90\u952e+\u97f3\u91cf\u4e0b\u952e\u8fdb\u5165\u7684\u662fRecovery\u6a21\u5f0f\uff0c\u6211\u4eec\u6b63\u5e38\u5f00\u673a\u4e00\u822c\u90fd\u901a\u8fc7\u7b2c\u4e00\u79cd\u65b9\u5f0f\u8fdb\u5165\u3002","title":"\u524d\u8a00"},{"location":"android/android_startup/#bootloader","text":"\u5f53\u6309\u4e0b\u7535\u6e90\u952e\u6216\u8005\u7cfb\u7edf\u91cd\u542f\u7684\u65f6\u5019\uff0c\u5f15\u5bfc\u82af\u7247\u4f1a\u4eceROM\uff08\u8fd9\u91cc\u4e00\u822c\u662fFlash ROM\uff0c\u5373\u95ea\u5b58\uff09\u4e2d\u9884\u5b9a\u4e49\u7684\u4f4d\u7f6e\u5c06BootLoader\u52a0\u8f7d\u5230RAM\u4e2d\uff0c\u63a5\u7740\uff0cBootLoader\u4f1a\u628alinux\u5185\u6838\u52a0\u8f7d\u5230RAM\u4e2d\u5e76\u542f\u52a8\u3002 BootLoader\u662f\u5728\u7cfb\u7edf\u5185\u6838\u8fd0\u884c\u4e4b\u524d\u8fd0\u884c\u7684\u4e00\u5c0f\u6bb5\u7a0b\u5e8f\uff0c\u4e5f\u662f\u7cfb\u7edf\u8fd0\u884c\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5b83\u7684\u4f5c\u7528\u5982\u4e0b\uff1a 1.\u521d\u59cb\u5316RAM\uff08\u4e00\u822c\u6307\u5185\u5b58\uff09 2.\u521d\u59cb\u5316\u786c\u4ef6\u8bbe\u5907 3.\u52a0\u8f7d\u5185\u6838\u548c\u5185\u5b58\u7a7a\u95f4\u5f71\u50cf\u56fe 4.\u8df3\u8f6c\u5230\u5185\u6838 Android\u7cfb\u7edf\u7684\u542f\u52a8\uff0c\u4e5f\u662flinux\u7cfb\u7edf\u7684\u542f\u52a8\u3002 \u542f\u52a8\u5185\u6838\u65f6\uff0c\u4f1a\u6267\u884c\u8bbe\u7f6e\u7f13\u5b58\uff0c\u52a0\u8f7d\u9a71\u52a8\u7b49\u6b65\u9aa4\uff0c\u7136\u540e\u67e5\u627einit.rc\u6587\u4ef6\uff0c\u5e76\u542f\u52a8init\u8fdb\u7a0b\u3002","title":"Bootloader\u2014\u2014\u7b2c\u4e00\u4e2a\u7a0b\u5e8f"},{"location":"android/android_startup/#init1","text":"Linux\u5185\u6838\u542f\u52a8\u8fc7\u7a0b\u4e2d\u4f1a\u521b\u5efainit\u8fdb\u7a0b\uff0cinit\u8fdb\u7a0b\u662f\u7528\u6237\u7a7a\u95f4\u7684\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\uff08pid=1\uff09\uff0c\u5bf9\u5e94\u7684\u6e90\u6587\u4ef6\u4e3a\uff1a system/core/init/main.cpp \uff0c\uff08\u8fd9\u91cc\u8981\u8bf4\u660e\u4e00\u4e0b\uff0c\u5728\u5b89\u53538\u30019\u7248\u672c\u4e2d\uff0cinit\u7684\u6e90\u6587\u4ef6\u5728***system/core/init/init.cpp***\uff0c\u5728\u5b89\u535310\u300111\u4ee5\u53ca\u540e\u7684\u7248\u672c\u91cc\uff0cinit\u6e90\u6587\u4ef6\u8fc1\u79fb\u5230***main.cpp***\u4e2d\uff09\u5b83\u7684main\u65b9\u6cd5\u5982\u4e0b\uff1a int main ( int argc , char ** argv ) { #if __has_feature(address_sanitizer) __asan_set_error_report_callback ( AsanReportCallback ); #endif if ( ! strcmp ( basename ( argv [ 0 ]), \"ueventd\" )) { return ueventd_main ( argc , argv ); } if ( argc > 1 ) { if ( ! strcmp ( argv [ 1 ], \"subcontext\" )) { android :: base :: InitLogging ( argv , & android :: base :: KernelLogger ); const BuiltinFunctionMap & function_map = GetBuiltinFunctionMap (); return SubcontextMain ( argc , argv , & function_map ); } if ( ! strcmp ( argv [ 1 ], \"selinux_setup\" )) { return SetupSelinux ( argv ); } // \u5f53argc > 1\u65f6\u542f\u52a8\u7b2c\u4e8c\u9636\u6bb5\u51fd\u6570 if ( ! strcmp ( argv [ 1 ], \"second_stage\" )) { return SecondStageMain ( argc , argv ); } } //\u542f\u52a8\u7b2c\u4e00\u9636\u6bb5\u51fd\u6570 return FirstStageMain ( argc , argv ); } \u5148\u770b\u4e0b**FirstStageMain**\u8fd9\u4e2a\u51fd\u6570\uff1a\u5728***system/core/init/first_stage_init.cpp***\u4e2d int FirstStageMain ( int argc , char ** argv ) { ... //\u521b\u5efa\u548c\u6302\u8f7d\u542f\u52a8\u6240\u9700\u7684\u6587\u4ef6\u76ee\u5f55 CHECKCALL ( mount ( \"tmpfs\" , \"/dev\" , \"tmpfs\" , MS_NOSUID , \"mode=0755\" )); CHECKCALL ( mkdir ( \"/dev/pts\" , 0755 )); CHECKCALL ( mkdir ( \"/dev/socket\" , 0755 )); CHECKCALL ( mount ( \"devpts\" , \"/dev/pts\" , \"devpts\" , 0 , NULL )); #define MAKE_STR(x) __STRING(x) CHECKCALL ( mount ( \"proc\" , \"/proc\" , \"proc\" , 0 , \"hidepid=2,gid=\" MAKE_STR ( AID_READPROC ))); #undef MAKE_STR CHECKCALL ( chmod ( \"/proc/cmdline\" , 0440 )); ... CHECKCALL ( mount ( \"sysfs\" , \"/sys\" , \"sysfs\" , 0 , NULL )); CHECKCALL ( mount ( \"selinuxfs\" , \"/sys/fs/selinux\" , \"selinuxfs\" , 0 , NULL )); CHECKCALL ( mknod ( \"/dev/kmsg\" , S_IFCHR | 0600 , makedev ( 1 , 11 ))); ... return 1 ; } \u518d\u770b**SecondStageMain**\uff0c\u5bf9\u5e94\u76ee\u5f55\u5728\uff1a system/core/init/init.cpp int SecondStageMain ( int argc , char ** argv ) { //\u521d\u59cb\u5316\u5185\u6838\u65e5\u5fd7\u5904\u7406\u5de5\u5177 InitKernelLogging ( argv ); //\u521d\u59cb\u5316\u5c5e\u6027\u670d\u52a1 PropertyInit (); //\u542f\u52a8\u5c5e\u6027\u670d\u52a1 StartPropertyService ( & property_fd ); //\u89e3\u6790init.rc\u914d\u7f6e\u6587\u4ef6 LoadBootScripts ( am , sm ); return 0 ; } static void LoadBootScripts ( ActionManager & action_manager , ServiceList & service_list ) { Parser parser = CreateParser ( action_manager , service_list ); std :: string bootscript = GetProperty ( \"ro.boot.init_rc\" , \"\" ); if ( bootscript . empty ()) { parser . ParseConfig ( \"/system/etc/init/hw/init.rc\" ); ... } else { parser . ParseConfig ( bootscript ); } } \u4e0a\u9762\u4e24\u4e2a\u9636\u6bb5\u90fd\u5728init\u8fdb\u7a0b\u8fdb\u884c\uff0c\u6211\u4eec\u77e5\u9053init\u505a\u4e86\u4e00\u4e0b\u51e0\u4ef6\u4e8b\u60c5\uff1a \u521b\u5efa\u548c\u6302\u8f7d\u542f\u52a8\u6240\u9700\u7684\u6587\u4ef6\u76ee\u5f55 \u521d\u59cb\u5316\u5c5e\u6027\u670d\u52a1 \u542f\u52a8\u5c5e\u6027\u670d\u52a1 \u89e3\u6790**init.rc**\u914d\u7f6e\u6587\u4ef6\uff0c\u542f\u52a8zygote\u8fdb\u7a0b \u8fd9\u91cc\u91cd\u70b9\u770b\u4e0b**init.rc**\u914d\u7f6e\u6587\u4ef6\uff0c\u5927\u6982\u5185\u5bb9\u5982\u4e0b\uff1a import /init.environ.rc import /system/etc/init/hw/init.usb.rc import /init.${ro.hardware}.rc import /vendor/etc/init/hw/init.${ro.hardware}.rc import /system/etc/init/hw/init.usb.configfs.rc import /system/etc/init/hw/init.${ro.zygote}.rc on early-init write /proc/sys/kernel/sysrq 0 write /proc/sys/kernel/modprobe \\n ... service console /system/bin/sh class core console disabled user shell group shell log readproc seclabel u:r:shell:s0 setenv HOSTNAME console on property:ro.debuggable=1 chmod 0773 /data/misc/trace chmod 0775 /data/misc/wmtrace ... rc\u6587\u4ef6\u7531Android\u521d\u59cb\u5316\u8bed\u8a00\u7f16\u5199\uff0crc\u6587\u4ef6\u4e3b\u8981\u5305\u542bAction\u3001Service\u3001Command\u3001Options\u7b49\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u7531\u7279\u6b8a\u7684\u547d\u4ee4\u7ec4\u6210\u3002 \u5728\u5f00\u5934\u51e0\u884c\u4ee3\u7801\u4e2d\uff0cimport\u5bfc\u5165\u4e86\u51e0\u4e2arc\u6587\u4ef6\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u5728 ***system/core/rootdir***\u76ee\u5f55\u4e0b\u6709\u591a\u4e2ainit.xxx.rc\u6587\u4ef6\uff0c\u5176\u4e2dxxx\u6709zygote32\u548czygote64\u7b49\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u4e0d\u540c\u7684\u786c\u4ef6\u73af\u5883\u4e0b\uff0c\u9700\u8981\u5bfc\u5165\u76f8\u5e94\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u6bd4\u5982\u572864\u4f4d\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0cinit.zygote64.rc\u6587\u4ef6\u4f1a\u88ab\u5bfc\u5165\uff0c\u5b83\u7684\u5185\u5bb9\u5982\u4e0b\uff1a service zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server class main priority -20 user root group root readproc reserved_disk socket zygote stream 660 root system socket usap_pool_primary stream 660 root system onrestart exec_background - system system -- /system/bin/vdc volume abort_fuse onrestart write /sys/power/state on onrestart restart audioserver onrestart restart cameraserver onrestart restart media onrestart restart netd onrestart restart wificond writepid /dev/cpuset/foreground/tasks \u8fd9\u51e0\u884c\u4ee3\u7801\u8868\u793a\u542f\u52a8\u4e00\u4e2a\u540d\u5b57\u4e3azygote\u3001\u6267\u884c\u6587\u4ef6\u8def\u5f84\u4e3a\uff1a/system/bin/app_process64\u3001\u53c2\u6570\u4e3a-Xzygote /system/bin --zygote --start-system-server\u7684\u8fdb\u7a0b\u3002 \u9664\u4e86zygote\u8fdb\u7a0b\uff0c\u8fd8\u6709\u8bb8\u591a\u5173\u952e\u8fdb\u7a0b\u90fd\u662f\u7531init\u8fdb\u7a0b\u901a\u8fc7\u8bfb\u53d6\u76f8\u5e94\u7684rc\u6587\u4ef6\u8fdb\u884c\u542f\u52a8\u7684\uff0c\u5982 servicemanager\u3001surfaceflinger \u548c mediaserver \u8fdb\u7a0b\u7b49\u7b49\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u90fd\u662f\u4fdd\u8bc1\u7cfb\u7edf\u8fd0\u884c\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002\u81f3\u4e8e\u8fd9\u4e9b\u8fdb\u7a0b\u662f\u5982\u4f55\u542f\u52a8\u7684\u4eca\u5929\u5148\u4e0d\u505a\u51fa\u8bb2\u89e3\uff0c\u540e\u7eed\u4f1a\u9488\u5bf9\u6027\u8bb2\u89e3\u3002","title":"init\u8fdb\u7a0b\u2014\u20141\u53f7\u8fdb\u7a0b"},{"location":"android/android_startup/#zygotejava","text":"\u4e0a\u9762\u8bf4\u4e86init\u8fdb\u7a0b\u4f1a\u89e3\u6790\u914d\u7f6e\u6587\u4ef6\uff0c\u542f\u52a8zygote\u8fdb\u7a0b\uff0c\u90a3\u4ec0\u4e48\u662fzygote\u8fdb\u7a0b\u5462\uff1f Zygote\u53c8\u79f0\u5b75\u5316\u5668\uff0c\u7528\u4e8e\u521b\u5efaDVM\u548cART\u3001\u5e94\u7528\u7a0b\u5e8f\u8fdb\u7a0b\u4ee5\u53ca\u8fd0\u884c\u7cfb\u7edf\u5173\u952e\u670d\u52a1\u7684SystemServer\u8fdb\u7a0b","title":"Zygote\u8fdb\u7a0b\u2014\u2014Java\u8fdb\u7a0b\u7684\u59cb\u7956"},{"location":"android/android_startup/#_2","text":"\u901a\u8fc7fork\u7684\u5f62\u5f0f\u6765\u521b\u5efa\u5e94\u7528\u7a0b\u5e8f\u8fdb\u7a0b\u548cSystemServer\u8fdb\u7a0b\uff0c Zygote\u7684 Java\u6846\u67b6\u5c42\u4e2d\u4f1a\u521b\u5efa\u4e00\u4e2aServer\u7aef\u7684Socket\uff0c\u8fd9\u4e2aSocket\u7528\u6765\u7b49\u5f85AMS\u8bf7\u6c42Zygote\u6765\u521b\u5efa\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u7a0b\u3002","title":"\u5de5\u4f5c\u539f\u7406"},{"location":"android/android_startup/#_3","text":"Zygote\u542f\u52a8\u662f\u5728init.rc\u914d\u7f6e\u6587\u4ef6\u91cc\u9762\u8c03\u7528 \u7684\uff0c\u901a\u8fc7ro.zygote\u7684\u5c5e\u6027\u9009\u62e9\u5f15\u5165\u811a\u672c\uff0c\u4e3b\u65b9\u6cd5\u662fmain\u65b9\u6cd5\u3002 on nonencrypted class_start main class_start late_start \u6211\u4eec\u76f4\u63a5\u8fdb\u5165\u6e90\u7801\u770b\uff1a\u5728***frameworks/base/cmds/app_process/app_main.cpp***\u4e2d\uff1a int main ( int argc , char * const argv []) { ... AppRuntime runtime ( argv [ 0 ], computeArgBlockSize ( argc , argv )); ... if ( zygote ) { //\u8c03\u7528AppRuntime\u7684\u7236\u7c7bAndroidRuntime\u7684start\u65b9\u6cd5\u542f\u52a8zygote\u8fdb\u7a0b runtime . start ( \"com.android.internal.os.ZygoteInit\" , args , zygote ); } else if ( className ) { runtime . start ( \"com.android.internal.os.RuntimeInit\" , args , zygote ); } else { fprintf ( stderr , \"Error: no class name or --zygote supplied. \\n \" ); app_usage (); LOG_ALWAYS_FATAL ( \"app_process: no class name or --zygote supplied.\" ); } } \u6765\u770b\u770bstart\u505a\u4ec0\u4e48\u4e8b\u60c5\uff1a\u5728***frameworks/base/core/jni/AndroidRuntime.cpp***\uff1a void AndroidRuntime::start ( const char * className , const Vector < String8 >& options , bool zygote ) { ... /* start the virtual machine */ JniInvocation jni_invocation ; jni_invocation . Init ( NULL ); JNIEnv * env ; //\u542f\u52a8JVM if ( startVm ( & mJavaVM , & env , zygote , primary_zygote ) != 0 ) { return ; } onVmCreated ( env ); //\u4e3aJVM\u865a\u62df\u673a\u6ce8\u518cJNI\u65b9\u6cd5 if ( startReg ( env ) < 0 ) { ALOGE ( \"Unable to register all android natives \\n \" ); return ; } jclass stringClass ; jobjectArray strArray ; jstring classNameStr ; stringClass = env -> FindClass ( \"java/lang/String\" ); assert ( stringClass != NULL ); //\u521b\u5efa\u6570\u7ec4 strArray = env -> NewObjectArray ( options . size () + 1 , stringClass , NULL ); assert ( strArray != NULL ); //\u4eceapp_main\u7684main\u51fd\u6570\u5f97\u77e5classNameStr\u4e3a\uff1acom.android.internal.os.ZygoteInit classNameStr = env -> NewStringUTF ( className ); assert ( classNameStr != NULL ); env -> SetObjectArrayElement ( strArray , 0 , classNameStr ); for ( size_t i = 0 ; i < options . size (); ++ i ) { jstring optionsStr = env -> NewStringUTF ( options . itemAt ( i ). string ()); assert ( optionsStr != NULL ); env -> SetObjectArrayElement ( strArray , i + 1 , optionsStr ); } char * slashClassName = toSlashClassName ( className != NULL ? className : \"\" ); jclass startClass = env -> FindClass ( slashClassName ); if ( startClass == NULL ) { ALOGE ( \"JavaVM unable to locate class '%s' \\n \" , slashClassName ); /* keep going */ } else { //\u627e\u5230ZygoteInit\u7684main\u51fd\u6570 jmethodID startMeth = env -> GetStaticMethodID ( startClass , \"main\" , \"([Ljava/lang/String;)V\" ); if ( startMeth == NULL ) { ALOGE ( \"JavaVM unable to find main() in '%s' \\n \" , className ); /* keep going */ } else { //\u901a\u8fc7JNI\u8c03\u7528ZygoteInit\u7684main\u51fd\u6570 env -> CallStaticVoidMethod ( startClass , startMeth , strArray ); #if 0 if (env->ExceptionCheck()) threadExitUncaughtException(env); #endif } } ... } \u8fd9\u91cc\u662f\u4e00\u4e2aJNI\u8c03\u7528\uff0c\u6211\u4eec\u77e5\u9053\u662f\u5728ZygoteInit\u4e2d\uff0c\u8fd9\u80af\u5b9a\u662f\u4e00\u4e2ajava\u6587\u4ef6\u4e86\uff0c\u6765\u770b\u5728\u5b83\u54ea\u91cc\uff1a frameworks/base/core/java/com/android/internal/os/ZygoteInit.java public static void main ( String argv [] ) { try { if ( ! enableLazyPreload ) { ... //\u9884\u52a0\u8f7d\u7c7b\u548c\u8d44\u6e90 preload ( bootTimingsTraceLog ); ... } //\u521b\u5efaServer\u7aefsocket zygoteServer = new ZygoteServer ( isPrimaryZygote ); ... Log . i ( TAG , \"Accepting command socket connections\" ); if ( startSystemServer ) { //\u542f\u52a8system_server\u8fdb\u7a0b Runnable r = forkSystemServer ( abiList , zygoteSocketName , zygoteServer ); if ( r != null ) { r . run (); return ; } } //\u7b49\u5f85AMS\u8bf7\u6c42 caller = zygoteServer . runSelectLoop ( abiList ); } catch ( Throwable ex ) { Log . e ( TAG , \"System zygote died with exception\" , ex ); throw ex ; } finally { if ( zygoteServer != null ) { zygoteServer . closeServerSocket (); } } if ( caller != null ) { caller . run (); } } \u901a\u8fc7zygoteServer\u6765\u6267\u884crunSelectLoop\uff0c\u770b\u5230caller.run()\uff0c\u53ef\u77e5\u8fd9\u662f\u4e00\u4e2aRunnable\uff0c\u8fdbZygoteServer\u770b\u4e0b\uff1a frameworks/base/core/java/com/android/internal/os/ZygoteServer.java ZygoteServer ( boolean isPrimaryZygote ) { mUsapPoolEventFD = Zygote . getUsapPoolEventFD (); if ( isPrimaryZygote ) { //\u521b\u5efaSocket\u5ba2\u6237\u7aef mZygoteSocket = Zygote . createManagedSocketFromInitSocket ( Zygote . PRIMARY_SOCKET_NAME ); mUsapPoolSocket = Zygote . createManagedSocketFromInitSocket ( Zygote . USAP_POOL_PRIMARY_SOCKET_NAME ); } else { mZygoteSocket = Zygote . createManagedSocketFromInitSocket ( Zygote . SECONDARY_SOCKET_NAME ); mUsapPoolSocket = Zygote . createManagedSocketFromInitSocket ( Zygote . USAP_POOL_SECONDARY_SOCKET_NAME ); } mUsapPoolSupported = true ; fetchUsapPoolPolicyProps (); } Runnable runSelectLoop ( String abiList ) { ArrayList < FileDescriptor > socketFDs = new ArrayList <> (); ArrayList < ZygoteConnection > peers = new ArrayList <> (); //\u8fd9\u91cc\u7684mZygoteSocket\u5c31\u662f\u521a\u521a\u521b\u5efa\u7684\u670d\u52a1\u7aefocket socketFDs . add ( mZygoteSocket . getFileDescriptor ()); peers . add ( null ); mUsapPoolRefillTriggerTimestamp = INVALID_TIMESTAMP ; //\u5faa\u73af\u8bfb\u53d6\u72b6\u6001 while ( true ) { fetchUsapPoolPolicyPropsWithMinInterval (); mUsapPoolRefillAction = UsapPoolRefillAction . NONE ; int [] usapPipeFDs = null ; StructPollfd [] pollFDs ; ... int pollIndex = 0 ; for ( FileDescriptor socketFD : socketFDs ) { pollFDs [ pollIndex ] = new StructPollfd (); pollFDs [ pollIndex ] . fd = socketFD ; pollFDs [ pollIndex ] . events = ( short ) POLLIN ; ++ pollIndex ; } final int usapPoolEventFDIndex = pollIndex ; while ( -- pollIndex >= 0 ) { //\u8bfb\u53d6\u7684\u72b6\u6001\u4e0d\u662f\u5ba2\u6237\u7aef\u8fde\u63a5\u6216\u8005\u6570\u636e\u8bf7\u6c42\u65f6\uff0c\u8fdb\u5165\u4e0b\u4e00\u6b21\u5faa\u73af if (( pollFDs [ pollIndex ] . revents & POLLIN ) == 0 ) { continue ; } if ( pollIndex == 0 ) { //\u8868\u793a\u8ddf\u5ba2\u6237\u7aefSocket \u8fde\u63a5\u4e0a\u4e86 ZygoteConnection newPeer = acceptCommandPeer ( abiList ); peers . add ( newPeer ); socketFDs . add ( newPeer . getFileDescriptor ()); } else if ( pollIndex < usapPoolEventFDIndex ) { //\u8fd9\u91cc\u7684usapPoolEventFDIndex\u4e3asocketFD\u7684\u4e2a\u6570 try { //\u8868\u793a\u63a5\u6536\u5230\u5ba2\u6237\u7aef\u53d1\u8fc7\u6765\u7684\u8bf7\u6c42 ZygoteConnection connection = peers . get ( pollIndex ); //processOneCommand\u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u7a0b final Runnable command = connection . processOneCommand ( this ); if ( mIsForkChild ) { if ( command == null ) { throw new IllegalStateException ( \"command == null\" ); } return command ; } else { if ( command != null ) { throw new IllegalStateException ( \"command != null\" ); } ... } } } ... } } } \u8fd9\u91cc\u8fdb\u5165\u4e86ZygoteConnection\u8fd9\u4e2a\u7c7b\u4e2d\uff0c\u5177\u4f53\u76ee\u5f55\u5728\uff1a frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java Runnable processOneCommand ( ZygoteServer zygoteServer ) { String [] args ; try { //\u8bfb\u53d6socket\u5ba2\u6237\u7aef\u53d1\u9001\u8fc7\u6765\u7684\u53c2\u6570\u5217\u8868 args = Zygote . readArgumentList ( mSocketReader ); } catch ( IOException ex ) { throw new IllegalStateException ( \"IOException on command socket\" , ex ); } ... //\u5c06 socket \u5ba2\u6237\u7aef\u4f20\u9012\u8fc7\u6765\u7684\u53c2\u6570\uff0c\u89e3\u6790\u6210 Arguments \u5bf9\u8c61\u683c\u5f0f ZygoteArguments parsedArgs = new ZygoteArguments ( args ); ... //\u540c\u6837\u8c03\u7528Zygote\u7684forkAndSpecialize\u65b9\u6cd5fork\u51fa\u5b50\u8fdb\u7a0b pid = Zygote . forkAndSpecialize ( parsedArgs . mUid , parsedArgs . mGid , parsedArgs . mGids , parsedArgs . mRuntimeFlags , rlimits , parsedArgs . mMountExternal , parsedArgs . mSeInfo , parsedArgs . mNiceName , fdsToClose , fdsToIgnore , parsedArgs . mStartChildZygote , parsedArgs . mInstructionSet , parsedArgs . mAppDataDir , parsedArgs . mIsTopApp , parsedArgs . mPkgDataInfoList , parsedArgs . mWhitelistedDataInfoList , parsedArgs . mBindMountAppDataDirs , parsedArgs . mBindMountAppStorageDirs ); try { if ( pid == 0 ) { // in child zygoteServer . setForkChild (); zygoteServer . closeServerSocket (); IoUtils . closeQuietly ( serverPipeFd ); serverPipeFd = null ; //\u8fdb\u5165\u5b50\u8fdb\u7a0b\u6d41\u7a0b return handleChildProc ( parsedArgs , childPipeFd , parsedArgs . mStartChildZygote ); } else { // In the parent. A pid < 0 indicates a failure and will be handled in // handleParentProc. IoUtils . closeQuietly ( childPipeFd ); childPipeFd = null ; //\u8fdb\u5165\u7236\u8fdb\u7a0b\u6d41\u7a0b handleParentProc ( pid , serverPipeFd ); return null ; } } finally { IoUtils . closeQuietly ( childPipeFd ); IoUtils . closeQuietly ( serverPipeFd ); } } \u81f3\u6b64\uff0c Zygote\u542f\u52a8\u7684\u5168\u90e8\u6d41\u7a0b\u5df2\u7ecf\u8d70\u5b8c\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u8fdb\u5165\u5230system_server\u8fdb\u7a0b\u4e86\u3002","title":"\u542f\u52a8"},{"location":"android/android_startup/#_4","text":"Zygote\u8fdb\u7a0b\u542f\u52a8\u505a\u4e86\u54ea\u4e9b\u4e8b\u60c5\uff1a \u521b\u5efaAppRuntime\uff08\u7ee7\u627f\u81eaAndroidRuntime\uff09\uff0c\u5e76\u8c03\u7528\u5b83\u7684**start**\u65b9\u6cd5\u3002 \u5728AndroidRuntime\u4e2d\uff0c\u542f\u52a8JVM\u865a\u62df\u673a\uff0c\u5e76\u6ce8\u518cJNI\u65b9\u6cd5\uff0c\u901a\u8fc7JNI\u8c03\u7528\u8fdb\u5165ZygoteInit\u7684**main**\u51fd\u6570\uff08\u7b2c\u4e00\u6b21\u8fdb\u5165Java\u7684\u4e16\u754c\uff09 \u901a\u8fc7**ZygoteServer**\u6784\u9020\u51fd\u6570\u5efa\u7acbSocket\u901a\u9053\uff0c\u4f7fZygote\u8fdb\u7a0b\u6210\u4e3asocket\u670d\u52a1\u7aef\u3002\u5e76\u901a\u8fc7**runSelectLoop()** \u51fd\u6570\u7b49\u5f85AMS \u53d1\u9001\u8bf7\u6c42\u521b\u5efa\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u7a0b\u3002 \u8c03\u7528**forkSystemServer**()\u51fd\u6570fork\u51fasystem_server\u8fdb\u7a0b\u3002","title":"\u603b\u7ed3\uff1a"},{"location":"android/android_startup/#system_server","text":"system_server\u8fdb\u7a0b\u627f\u8f7d\u4e86framework\u5c42\u7684\u6838\u5fc3\u4e1a\u52a1\u3002 system_server\u8fdb\u7a0b\u7531zygote\u542f\u52a8\uff0c\u7528\u4e8e\u521b\u5efaAMS\u3001WMS\u3001PMS\u7b49\u7cfb\u7edf\u670d\u52a1\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u4e00\u8d77\u901a\u8fc7\u6e90\u7801\u5206\u6790\u4e0bsystem_server\u8fdb\u7a0b\u7684\u542f\u52a8\u8fc7\u7a0b\u548c\u6267\u884c\u8fc7\u7a0b\u3002","title":"system_server\u8fdb\u7a0b"},{"location":"android/android_startup/#system_server_1","text":"\u4e0a\u9762\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0czgyote\u8fdb\u7a0b\u5728\u542f\u52a8\u7684\u65f6\u5019\u4f1a\u901a\u8fc7forkSystemServer\u6765fork\u51fa\u4e00\u4e2a\u53ebsystem_server\u7684\u8fdb\u7a0b\uff0c\u8fd4\u56de\u4e00\u4e2aRunnable\uff0c\u6765\u770b\u4ee3\u7801\uff1a private static Runnable forkSystemServer ( String abiList , String socketName , ZygoteServer zygoteServer ) { //\u542f\u52a8system_server\u7684\u547d\u4ee4\u884c\u53c2\u6570 String args [] = { \"--setuid=1000\" , \"--setgid=1000\" , \"--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1023,\" + \"1024,1032,1065,3001,3002,3003,3006,3007,3009,3010,3011\" , \"--capabilities=\" + capabilities + \",\" + capabilities , \"--nice-name=system_server\" , \"--runtime-args\" , \"--target-sdk-version=\" + VMRuntime . SDK_VERSION_CUR_DEVELOPMENT , \"com.android.server.SystemServer\" , }; ZygoteArguments parsedArgs = null ; int pid ; ... /* Request to fork the system server process */ pid = Zygote . forkSystemServer ( parsedArgs . mUid , parsedArgs . mGid , parsedArgs . mGids , parsedArgs . mRuntimeFlags , null , parsedArgs . mPermittedCapabilities , parsedArgs . mEffectiveCapabilities ); } catch ( IllegalArgumentException ex ) { throw new RuntimeException ( ex ); } /* For child process */ if ( pid == 0 ) { if ( hasSecondZygote ( abiList )) { waitForSecondaryZygote ( socketName ); } zygoteServer . closeServerSocket (); return handleSystemServerProcess ( parsedArgs ); } return null ; } \u6700\u7ec8\u8fd4\u56de\u4e86handleSystemServerProcess\u65b9\u6cd5\u3002 private static Runnable handleSystemServerProcess ( ZygoteArguments parsedArgs ) { ... if ( parsedArgs . mInvokeWith != null ) { ... } else { ClassLoader cl = null ; if ( systemServerClasspath != null ) { cl = createPathClassLoader ( systemServerClasspath , parsedArgs . mTargetSdkVersion ); Thread . currentThread (). setContextClassLoader ( cl ); } /* * Pass the remaining arguments to SystemServer. */ return ZygoteInit . zygoteInit ( parsedArgs . mTargetSdkVersion , parsedArgs . mDisabledCompatChanges , parsedArgs . mRemainingArgs , cl ); } /* should never reach here */ } public static final Runnable zygoteInit ( int targetSdkVersion , long [] disabledCompatChanges , String [] argv , ClassLoader classLoader ) { if ( RuntimeInit . DEBUG ) { Slog . d ( RuntimeInit . TAG , \"RuntimeInit: Starting application from zygote\" ); } Trace . traceBegin ( Trace . TRACE_TAG_ACTIVITY_MANAGER , \"ZygoteInit\" ); RuntimeInit . redirectLogStreams (); RuntimeInit . commonInit (); //\u901a\u8fc7Native\u5c42\u4e2dAndroidRuntime.cpp\u7684JNI\u65b9\u6cd5\u6700\u7ec8\u8c03\u7528app_main.cpp\u7684onZygoteInit\u65b9\u6cd5\uff0c //\u542f\u52a8Binder\u7ebf\u7a0b\u6c60\uff0c\u4f7fsystem_server\u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528Binder\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u901a\u4fe1 ZygoteInit . nativeZygoteInit (); //\u7ee7\u7eed\u5f80\u4e0b\u8c03\u7528 return RuntimeInit . applicationInit ( targetSdkVersion , disabledCompatChanges , argv , classLoader ); } \u8fdb\u5165RuntimeInit\u7684applicationInit\u65b9\u6cd5\u770b\u4e0b\uff1a protected static Runnable applicationInit ( int targetSdkVersion , long [] disabledCompatChanges , String [] argv , ClassLoader classLoader ) { ... return findStaticMain ( args . startClass , args . startArgs , classLoader ); } \u8c03\u7528findStaticMain\uff1a protected static Runnable findStaticMain ( String className , String [] argv , ClassLoader classLoader ) { Class <?> cl ; try { // \u901a\u8fc7\u53cd\u5c04\u5f97\u5230SystemServer\u7c7b cl = Class . forName ( className , true , classLoader ); } catch ( ClassNotFoundException ex ) { throw new RuntimeException ( \"Missing class when invoking static main \" + className , ex ); } Method m ; try { //\u4eceSystemServer\u7c7b\u4e2d\u62ff\u5230main\u65b9\u6cd5 m = cl . getMethod ( \"main\" , new Class [] { String [] . class }); } catch ( NoSuchMethodException ex ) { throw new RuntimeException ( \"Missing static main on \" + className , ex ); } catch ( SecurityException ex ) { throw new RuntimeException ( \"Problem getting static main on \" + className , ex ); } int modifiers = m . getModifiers (); if ( ! ( Modifier . isStatic ( modifiers ) && Modifier . isPublic ( modifiers ))) { throw new RuntimeException ( \"Main method is not public and static on \" + className ); } /* * This throw gets caught in ZygoteInit.main(), which responds * by invoking the exception's run() method. This arrangement * clears up all the stack frames that were required in setting * up the process. */ return new MethodAndArgsCaller ( m , argv ); } static class MethodAndArgsCaller implements Runnable { /** method to call */ private final Method mMethod ; /** argument array */ private final String [] mArgs ; public MethodAndArgsCaller ( Method method , String [] args ) { mMethod = method ; mArgs = args ; } public void run () { try { // \u8c03\u7528\u4f20\u9012\u8fc7\u6765\u7684mMethod mMethod . invoke ( null , new Object [] { mArgs }); } catch ( IllegalAccessException ex ) { throw new RuntimeException ( ex ); } catch ( InvocationTargetException ex ) { Throwable cause = ex . getCause (); if ( cause instanceof RuntimeException ) { throw ( RuntimeException ) cause ; } else if ( cause instanceof Error ) { throw ( Error ) cause ; } throw new RuntimeException ( ex ); } } } \u8fd9\u6837\uff0csystem_sever\u8fdb\u7a0b\u5c31\u542f\u52a8\u8d77\u6765\u4e86\uff0c\u5e76\u4e14\u8fdb\u5165\u4e86SystemServer.java\u7684main\u65b9\u6cd5\u3002 \u6ce8\u610f\u4e00\u4e0b\u4e0a\u9762\u90a3\u6bb5\u6ce8\u91ca\uff1a This throw gets caught in ZygoteInit.main(), which responds by invoking the exception's run() method. This arrangement clears up all the stack frames that were required in setting up the process. \u5728\u6700\u65b0\u7684\u7248\u672c\u91cc\uff0c\u5c06MethodAndArgsCaller\u5bf9\u8c61\u4f5c\u4e3a\u8fd4\u56de\u503c\u8fd4\u56de\uff0c\u6700\u540e\u5728ZygoteInit\u7684caller.run()\u65b9\u6cd5\u91cc\uff0c\u8fd9\u4e2a\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u6267\u884c\u4e86\u8fd4\u56de\u8fc7\u7a0b\uff0c\u81ea\u7136\u5728\u5806\u6808\u4e2d\u5bf9\u5e94\u7684\u6808\u5e27\u4e5f\u88ab\u5f39\u51fa\u6808\u4e86\u3002 if ( caller != null ) { caller . run (); }","title":"system_server\u8fdb\u7a0b\u7684\u542f\u52a8\u8fc7\u7a0b"},{"location":"android/android_startup/#system_server_2","text":"\u5728\uff1a frameworks/base/services/java/com/android/server/SystemServer.java /** * The main entry point from zygote. */ public static void main ( String [] args ) { new SystemServer (). run (); } \u6211\u4eec\u4ece\u6ce8\u91ca\u4e2d\u4e5f\u80fd\u770b\u5230\uff1a\u8fd9\u4e2a\u662f\u8fdb\u5165system_server\u8fdb\u7a0b\u7684\u5165\u53e3\uff0c\u8c03\u7528run()\u65b9\u6cd5 private void run () { ... // \u52a0\u8f7dlibandroid_servers.so System . loadLibrary ( \"android_servers\" ); ... // \u521b\u5efa SystemContext createSystemContext (); // \u521b\u5efa SystemServiceManager mSystemServiceManager = new SystemServiceManager ( mSystemContext ); LocalServices . addService ( SystemServiceManager . class , mSystemServiceManager ); SystemServerInitThreadPool . start (); ... // Start services. try { t . traceBegin ( \"StartServices\" ); //\u542f\u52a8\u5f15\u5bfc\u670d\u52a1 startBootstrapServices ( t ); //\u542f\u52a8\u6838\u5fc3\u670d\u52a1 startCoreServices ( t ); //\u542f\u52a8\u5176\u4ed6\u670d\u52a1 startOtherServices ( t ); } catch ( Throwable ex ) { ... } finally { t . traceEnd (); // StartServices } ... } \u53ef\u4ee5\u770b\u5230\uff0c\u5728run\u65b9\u6cd5\u4e2d\uff0c\u4e3b\u8981\u6267\u884c\u4e86\u542f\u52a8\u5f15\u5bfc\u670d\u52a1\u3001\u6838\u5fc3\u670d\u52a1\u3001\u5176\u4ed6\u670d\u52a1\u7684\u4efb\u52a1\uff0c\u4e0b\u9762\u901a\u8fc7\u8868\u683c\u5217\u4e3e\u4e00\u4e9b\u670d\u52a1\uff1a \u5f15\u5bfc\u670d\u52a1 \u4f5c\u7528 Installer \u7cfb\u7edf\u5b89\u88c5apk\u65f6\u7684\u4e00\u4e2a\u670d\u52a1\u7c7b\uff0c\u542f\u52a8\u5b8c\u6210Installer\u670d\u52a1\u4e4b\u540e\u624d\u80fd\u542f\u52a8\u5176\u4ed6\u7684\u7cfb\u7edf\u670d\u52a1 ActivityManagerService \u8d1f\u8d23\u56db\u5927\u7ec4\u4ef6\u7684\u542f\u52a8\u3001\u5207\u6362\u3001\u8c03\u5ea6\u3002 PowerManagerService \u8ba1\u7b97\u7cfb\u7edf\u4e2d\u548cPower\u76f8\u5173\u7684\u8ba1\u7b97\uff0c\u7136\u540e\u51b3\u7b56\u7cfb\u7edf\u5e94\u8be5\u5982\u4f55\u53cd\u5e94 DisplayManagerService \u7528\u6765\u7ba1\u7406\u6240\u6709\u663e\u793a\u8bbe\u5907 UserManagerService \u591a\u7528\u6237\u6a21\u5f0f\u7ba1\u7406 SensorService \u4e3a\u7cfb\u7edf\u63d0\u4f9b\u5404\u79cd\u611f\u5e94\u5668\u670d\u52a1 PackageManagerService \u7528\u6765\u5bf9apk\u8fdb\u884c\u5b89\u88c5\u3001\u89e3\u6790\u3001\u5220\u9664\u3001\u5378\u8f7d\u7b49\u7b49\u64cd\u4f5c LightsService \u7ba1\u7406\u548c\u663e\u793a\u80cc\u5149LED \u6838\u5fc3\u670d\u52a1 BatteryService \u7ba1\u7406\u7535\u6c60\u76f8\u5173\u7684\u670d\u52a1 UsageStatsService \u6536\u96c6\u7528\u6237\u4f7f\u7528\u6bcf\u4e00\u4e2aAPP\u7684\u9891\u7387\u3001\u4f7f\u7528\u65f6\u5e38 WebViewUpdateService WebView\u66f4\u65b0\u670d\u52a1 \u5176\u4ed6\u670d\u52a1 CameraService \u6444\u50cf\u5934\u76f8\u5173\u670d\u52a1 AlarmManagerService \u5168\u5c40\u5b9a\u65f6\u5668\u7ba1\u7406\u670d\u52a1 InputManagerService \u7ba1\u7406\u8f93\u5165\u4e8b\u4ef6 WindowManagerService \u7a97\u53e3\u7ba1\u7406\u670d\u52a1 VrManagerService VR\u6a21\u5f0f\u7ba1\u7406\u670d\u52a1 BluetoothService \u84dd\u7259\u7ba1\u7406\u670d\u52a1 NotificationManagerService \u901a\u77e5\u7ba1\u7406\u670d\u52a1 DeviceStorageMonitorService \u5b58\u50a8\u76f8\u5173\u7ba1\u7406\u670d\u52a1 LocationManagerService \u5b9a\u4f4d\u7ba1\u7406\u670d\u52a1 AudioService \u97f3\u9891\u76f8\u5173\u7ba1\u7406\u670d\u52a1 \u901a\u8fc7\u4e0a\u9762\u7684\u6d41\u7a0b\uff0csystem_server\u8fdb\u7a0b\u5c31\u542f\u52a8\u8d77\u6765\u4e86\uff0c\u5e76\u4e14\u542f\u52a8\u4e86\u5404\u79cd\u670d\u52a1\u3002","title":"system_server\u8fdb\u7a0b\u7684\u6267\u884c\u8fc7\u7a0b"},{"location":"android/android_startup/#_5","text":"system_server\u8fdb\u7a0b\u5728\u542f\u52a8\u8fc7\u7a0b\u4e2d\u5b8c\u6210\u7684\u5de5\u4f5c\u5206\u522b\u662f\uff1a \u542f\u52a8Binder\u7ebf\u7a0b\u6c60\uff0c\u5efa\u7acb\u8fdb\u7a0b\u95f4\u901a\u4fe1\u3002 \u521b\u5efa SystemServiceManager\uff0c\u7528\u4e8e\u5bf9\u7cfb\u7edf\u670d\u52a1\u8fdb\u884c\u521b\u5efa\u3001\u542f\u52a8\u548c\u751f\u547d\u5468\u671f\u7ba1\u7406\u3002 \u542f\u52a8\u5f15\u5bfc\u670d\u52a1\u3001\u6838\u5fc3\u670d\u52a1\u3001\u5176\u4ed6\u670d\u52a1\u7b49\u3002","title":"\u603b\u7ed3\uff1a"},{"location":"android/android_startup/#launcherandroid","text":"\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u4ec0\u4e48\u662fLauncher\u7684\u8bdd\uff0c\u770b\u5230\u4e0a\u9762\u7684\u9875\u9762\u5c31\u5e94\u8be5\u77e5\u9053\u4e86\uff0cLauncher\u5176\u5b9e\u5c31\u662f\u684c\u9762\uff0c\u662f\u4e00\u4e2a\u7cfb\u7edfapp\uff0c\u684c\u9762\u4e0a\u7684\u56fe\u6807\u5219\u662f\u542f\u52a8\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u56fe\u6807\u542f\u52a8\u5bf9\u5e94\u7684app\u3002","title":"Launcher\u2014\u2014Android\u7cfb\u7edf\u7684 \u201c\u684c\u9762\u201d"},{"location":"android/android_startup/#launcher","text":"\u4e0a\u6587\u4e2d\u6211\u4eec\u77e5\u9053 Zygote\u8fdb\u7a0b\u542f\u52a8\u4e86SystemServer\u8fdb\u7a0b\uff0c\u800c\u542f\u52a8Launcher\u7684\u5165\u53e3\u4e3aAMS\u7684systemReady\u65b9\u6cd5\uff0c\u5728SystemServer\u7684startOtherServices\u65b9\u6cd5\u4e2d\u88ab\u8c03\u7528\uff0c\u6211\u4eec\u770b\u4e0bstartOtherServices\uff1a private void startOtherServices ( @NonNull TimingsTraceAndSlog t ) { ... mActivityManagerService . systemReady (() -> { Slog . i ( TAG , \"Making services ready\" ); t . traceBegin ( \"StartActivityManagerReadyPhase\" ); mSystemServiceManager . startBootPhase ( t , SystemService . PHASE_ACTIVITY_MANAGER_READY ); ... }) } \u8c03\u7528AMS\u7684systemReady()\u65b9\u6cd5\uff0c\u6211\u4eec\u8fdb\u5165AMS\u770b\u4e0b\uff1a frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java public void systemReady ( final Runnable goingCallback , @NonNull TimingsTraceAndSlog t ) { ... t . traceBegin ( \"resumeTopActivities\" ); mAtmInternal . resumeTopActivities ( false /* scheduleIdle */ ); t . traceEnd (); ... } \u8fd9\u4e2a\u5730\u65b9\u5404\u7248\u672c\u6709\u5dee\u5f02 \uff1a \u5728\u5b89\u53538\u30019\u7248\u672c\u4e0a\u662f\u901a\u8fc7\u8c03\u7528ActivityStackSupervisor\u7684resumeFocusedStackTopActivityLocked\uff08\uff09\u65b9\u6cd5 \u800c\u5b89\u535310\u300111\u7248\u672c\u91cc\u5219\u662f\u4ea4\u7ed9\u4e86ActivityTaskManagerInternal\uff0c\u901a\u8fc7\u8c03\u7528resumeTopActivities\uff08\uff09\u65b9\u6cd5\u3002 \u6211\u662f\u6574\u4f53\u57fa\u4e8eAndroid11\u5206\u6790\u7684\u6d41\u7a0b\uff0c\u6240\u4ee5\u5bf9\u524d\u9762\u7248\u672c\u611f\u5174\u8da3\u7684\u540c\u5b66\uff0c\u53ef\u4ee5\u4e0b\u8f7d\u5bf9\u5e94\u7684\u6e90\u7801\u6765\u6df1\u5165\u4e86\u89e3\uff0c\u73b0\u5728\u6211\u4eec\u8fdb\u5165resumeTopActivities\u65b9\u6cd5\u770b\u4e0b\uff1a frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerInternal.java public abstract class ActivityTaskManagerInternal { ... public abstract void resumeTopActivities ( boolean scheduleIdle ); ... } \u8fd9\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u90a3\u5b83\u7684\u5b9e\u73b0\u7c7b\u5728\u54ea\u91cc\u5462\uff1f\u6211\u4eec\u6ce8\u610f\u5230\u5728AMS\u7684\u6784\u9020\u65b9\u6cd5\u4e2d\uff1a mAtmInternal = LocalServices . getService ( ActivityTaskManagerInternal . class ); LocalServices\u7c7b\u91cc\u9762\u662f\u4e00\u4e2a\u7c7b\u4e0e\u5bf9\u8c61\u7684\u952e\u503c\u5bf9\uff0c\u6211\u4eec\u627e\u5230\u5b83\u7684\u552f\u4e00\u7ee7\u627f\u7c7bActivityTaskManagerService.LocalService frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java public class ActivityTaskManagerService extends IActivityTaskManager . Stub { ... RootWindowContainer mRootWindowContainer ; final class LocalService extends ActivityTaskManagerInternal { ... @Override public void resumeTopActivities ( boolean scheduleIdle ) { synchronized ( mGlobalLock ) { mRootWindowContainer . resumeFocusedStacksTopActivities (); if ( scheduleIdle ) { mStackSupervisor . scheduleIdle (); } } } ... } } \u8fd9\u91cc\u8c03\u7528\u4e86RootWindowContainer\u7684resumeFocusedStacksTopActivities\u65b9\u6cd5 boolean resumeFocusedStacksTopActivities ( ActivityStack targetStack , ActivityRecord target , ActivityOptions targetOptions ) { ... for ( int displayNdx = getChildCount () - 1 ; displayNdx >= 0 ; -- displayNdx ) { boolean resumedOnDisplay = false ; ... if ( ! resumedOnDisplay ) { final ActivityStack focusedStack = display . getFocusedStack (); if ( focusedStack != null ) { result |= focusedStack . resumeTopActivityUncheckedLocked ( target , targetOptions ); } else if ( targetStack == null ) { result |= resumeHomeActivity ( null /* prev */ , \"no-focusable-task\" , display . getDefaultTaskDisplayArea ()); } } } return result ; } \u8fd9\u91cc\u770b\u4e0b\uff1a \u5f53focusedStack\u4e3anull\u65f6\uff0c\u76f4\u63a5\u542f\u52a8resumeHomeActivity\u3002 \u63a5\u4e0b\u6765\u53c8\u8d70\u5230\u4e86ActivityStack\uff1a boolean resumeTopActivityUncheckedLocked ( ActivityRecord prev , ActivityOptions options ) { ... result = resumeTopActivityInnerLocked ( prev , options ); ... return result ; } private boolean resumeTopActivityInnerLocked ( ActivityRecord prev , ActivityOptions options ) { ... if ( ! hasRunningActivity ) { // There are no activities left in the stack, let's look somewhere else. return resumeNextFocusableActivityWhenStackIsEmpty ( prev , options ); } ... } \u53c8\u8c03\u7528\u4e86resumeNextFocusableActivityWhenStackIsEmpty\uff1a private boolean resumeNextFocusableActivityWhenStackIsEmpty ( ActivityRecord prev , ActivityOptions options ) { .... return mRootWindowContainer . resumeHomeActivity ( prev , reason , getDisplayArea ()); } \u515c\u515c\u8f6c\u8f6c\uff0c\u53c8\u8fd4\u56de\u5230RootWindowContainer\u7c7b\u4e2d\uff0c\u8c03\u7528\u4e86resumeHomeActivity\u65b9\u6cd5\uff0c\u6211\u4eec\u56de\u5230\u8fd9\u4e2a\u7c7b \u770b\u4e0b\uff1a frameworks/base/services/core/java/com/android/server/wm/RootWindowContainer.java boolean resumeHomeActivity ( ActivityRecord prev , String reason , TaskDisplayArea taskDisplayArea ) { ... return startHomeOnTaskDisplayArea ( mCurrentUser , myReason , taskDisplayArea , false /* allowInstrumenting */ , false /* fromHomeKey */ ); } \u8d70\u5230\u4e86startHomeOnTaskDisplayArea\u65b9\u6cd5 boolean startHomeOnTaskDisplayArea ( int userId , String reason , TaskDisplayArea taskDisplayArea , boolean allowInstrumenting , boolean fromHomeKey ) { ... mService . getActivityStartController (). startHomeActivity ( homeIntent , aInfo , myReason , taskDisplayArea ); return true ; } \u901a\u8fc7ActivityTaskManagerService\u83b7\u53d6\u5230\u63a7\u5236\u5668\uff0c\u8fd9\u4e2a\u63a7\u5236\u5668\u5c31\u662fActivityStartController\uff0c\u542f\u52a8HomeActivity\uff1a frameworks/base/services/core/java/com/android/server/wm/ActivityStartController.java void startHomeActivity ( Intent intent , ActivityInfo aInfo , String reason , TaskDisplayArea taskDisplayArea ) { final ActivityOptions options = ActivityOptions . makeBasic (); options . setLaunchWindowingMode ( WINDOWING_MODE_FULLSCREEN ); if ( ! ActivityRecord . isResolverActivity ( aInfo . name )) { // The resolver activity shouldn't be put in home stack because when the foreground is // standard type activity, the resolver activity should be put on the top of current // foreground instead of bring home stack to front. options . setLaunchActivityType ( ACTIVITY_TYPE_HOME ); } final int displayId = taskDisplayArea . getDisplayId (); options . setLaunchDisplayId ( displayId ); options . setLaunchTaskDisplayArea ( taskDisplayArea . mRemoteToken . toWindowContainerToken ()); // The home activity will be started later, defer resuming to avoid unneccerary operations // (e.g. start home recursively) when creating home stack. mSupervisor . beginDeferResume (); final ActivityStack homeStack ; try { // Make sure home stack exists on display area. homeStack = taskDisplayArea . getOrCreateRootHomeTask ( ON_TOP ); } finally { mSupervisor . endDeferResume (); } mLastHomeActivityStartResult = obtainStarter ( intent , \"startHomeActivity: \" + reason ) . setOutActivity ( tmpOutRecord ) . setCallingUid ( 0 ) . setActivityInfo ( aInfo ) . setActivityOptions ( options . toBundle ()) . execute (); mLastHomeActivityStartRecord = tmpOutRecord [ 0 ] ; if ( homeStack . mInResumeTopActivity ) { mSupervisor . scheduleResumeTopActivities (); } } ActivityStarter obtainStarter ( Intent intent , String reason ) { return mFactory . obtain (). setIntent ( intent ). setReason ( reason ); }","title":"Launcher\u7684\u542f\u52a8"},{"location":"android/android_startup/#launcheractivity","text":"Launcher\u901a\u8fc7startActivitySafely\u65b9\u6cd5\u542f\u52a8Activity packages/apps/Launcher3/src/com/android/launcher3/Launcher.java @Override public boolean startActivitySafely ( View v , Intent intent , ItemInfo item , @Nullable String sourceContainer ) { if ( ! hasBeenResumed ()) { addOnResumeCallback (() -> startActivitySafely ( v , intent , item , sourceContainer )); if ( mOnDeferredActivityLaunchCallback != null ) { mOnDeferredActivityLaunchCallback . run (); mOnDeferredActivityLaunchCallback = null ; } return true ; } boolean success = super . startActivitySafely ( v , intent , item , sourceContainer ); if ( success && v instanceof BubbleTextView ) { // This is set to the view that launched the activity that navigated the user away // from launcher. Since there is no callback for when the activity has finished // launching, enable the press state and keep this reference to reset the press // state when we return to launcher. BubbleTextView btv = ( BubbleTextView ) v ; btv . setStayPressed ( true ); addOnResumeCallback ( btv ); } return success ; } Launcher\u542f\u52a8\u65f6\u5e8f\u56fe\u5982\u4e0b\uff1a \u603b\u7ed3\uff1a \u9996\u5148system_server\u901a\u8fc7AMS\u542f\u52a8Launcher AMS\u8c03\u7528\u4e86ActivityTaskManagerInternal\u7684resumeTopActivities\u65b9\u6cd5 \u5728RootWindowContainer\u5904\u7406\u663e\u793a\u76f8\u5173\u4e8b\u60c5\uff0c\u7136\u540e\u4f7f\u7528ActivityStack\u5904\u7406\u4e00\u4e9b\u5806\u6808\u76f8\u5173\u7684\u5de5\u4f5c\uff0c\u518d\u8c03\u7528RootActivityContainer\u7684resumeHomeActivity\u65b9\u6cd5\u3002\uff08\u5982\u679cActivityStack\u6ca1\u627e\u5230\uff0c\u5219\u76f4\u63a5\u8c03\u7528resumeHomeActivity\uff09 \u4f7f\u7528 ActivityStartController\u542f\u52a8Launcher Activity \u7ecf\u8fc7init\u8fdb\u7a0b\u3001zygote\u8fdb\u7a0b\u3001system_server\u8fdb\u7a0b\u3001launcher\u8fdb\u7a0b\u7684\u5206\u6790\uff0c\u6211\u4eec\u7ec8\u4e8e\u770b\u5230\u4e86\u7ed3\u679c \u5728AMS\u90a3\u5757\uff0c2\u4e07\u591a\u884c\u7684\u4ee3\u7801\uff0c\u770b\u7684\u6211\u6655\u5934\u8f6c\u5411\uff0c\u4e0d\u77e5\u9053\u600e\u4e48\u5f80\u4e0b\u8d70\uff0c\u597d\u5728\u6162\u6162\u7406\u6e05\u4e86\u601d\u8def\uff0c\u8fd9\u5757\u786e\u5b9e\u6709\u70b9\u96be\u7406\u89e3\uff0c\u540e\u7eed\u8fd8\u8981\u591a\u52a0\u6df1\u8bb0\u5fc6\u3002 \u8fdb\u5165\u684c\u9762\u540e\uff0c\u6574\u4e2a\u5b89\u5353\u7cfb\u7edf\u5c31\u542f\u52a8\u5b8c\u6210\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\uff1a \u6309\u4e0b\u7535\u6e90\uff0cROM\u4e2d\u7684Bootloader\u4f1a\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d Bootloader\u521d\u59cb\u5316\u8f6f\u786c\u4ef6\u73af\u5883\u540e\uff0c\u542f\u52a8Linux\u5185\u6838 Linux\u5185\u6838\u542f\u52a8\u4f1a\u505a\u8bbe\u7f6e\u7f13\u5b58\u3001\u52a0\u8f7d\u9a71\u52a8\u7b49\u4e00\u7cfb\u5217\u64cd\u4f5c\uff0c\u542f\u52a8\u5b8c\u6210\u540e\u4f1a\u542f\u52a8init\u8fdb\u7a0b init\u8fdb\u7a0b\u4f1a\u521d\u59cb\u5316\u5c5e\u6027\u670d\u52a1\uff0c\u5e76\u4e14\u89e3\u6790init.rc\u6587\u4ef6\uff0c\u542f\u52a8zygote\u8fdb\u7a0b zygote\u8fdb\u7a0b\u542f\u52a8\u4f1a\u521b\u5efaJVM\uff0c\u5e76\u4e3a\u5176\u6ce8\u518cJNI\u51fd\u6570\uff0c\u7136\u540e\u521b\u5efa\u670d\u52a1\u7aefSocket\uff0c\u542f\u52a8system_server\u8fdb\u7a0b system_server\u8fdb\u7a0b\u542f\u52a8\u4f1a\u521b\u5efaBinder\u7ebf\u7a0b\u6c60\uff0c\u4f7f\u5176\u5177\u5907IPC\u80fd\u529b\uff0c\u7136\u540e\u542f\u52a8AMS\u3001PMS\u3001WMS\u7b49\u5404\u79cd\u670d\u52a1 AMS\u542f\u52a8Launcher\uff0cLauncher\u88ab\u542f\u52a8\u540e\u4f1a\u5c06\u5df2\u5b89\u88c5\u7684\u5e94\u7528\u56fe\u7247\u663e\u793a\u5728\u754c\u9762\u4e0a\u3002 \u4e00\u4e2a\u590d\u6742\u7684Android\u7cfb\u7edf\u542f\u52a8\u5c31\u662f\u8fd9\u4e48\u8fd0\u884c\u8d77\u6765\u7684\uff0c\u770b\u4f3c\u7b80\u5355\uff0c\u5176\u5b9e\u5206\u6790\u8fc7\u540e\u624d\u53d1\u73b0\uff0c\u91cc\u9762\u6709\u5f88\u591a\u5927\u5927\u5c0f\u5c0f\u7684\u6d41\u7a0b\uff0c\u672c\u4eba\u80fd\u529b\u6709\u9650\uff0c\u5728\u5206\u6790\u8fc7\u7a0b\u4e2d\uff0c\u4ee3\u7801\u6709\u6240\u5220\u51cf\uff0c\u5982\u679c\u6587\u7ae0\u4e2d\u6709\u5199\u5f97\u4e0d\u5bf9\u7684\u5730\u65b9\uff0c\u6b22\u8fce\u5728\u7559\u8a00\u533a\u7559\u8a00\u5927\u5bb6\u4e00\u8d77\u8ba8\u8bba\uff0c\u5171\u540c\u5b66\u4e60\u8fdb\u6b65\u3002\u5982\u679c\u89c9\u5f97\u6211\u7684\u6587\u7ae0\u7ed9\u4e88\u4f60\u5e2e\u52a9\uff0c\u4e5f\u8bf7\u7ed9\u6211\u4e00\u4e2a\u559c\u6b22\u548c\u5173\u6ce8\u3002","title":"Launcher\u542f\u52a8Activity"},{"location":"android/app_startup/","text":"app\u542f\u52a8\u6d41\u7a0b\u2014\u2014\u57fa\u4e8eAndroid11\u5206\u6790 \u00b6 \u524d\u4e24\u5929\u5206\u6790\u4e86Android\u7cfb\u7edf\u7684\u542f\u52a8\u6d41\u7a0b\u540e\uff0c\u6211\u4eec\u77e5\u9053Android\u7cfb\u7edf\u542f\u52a8\u6700\u7ec8\u4f1a\u8d70\u5230Launcher\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u6240\u770b\u89c1\u7684\u201d\u684c\u9762\u201c\uff0capp\u7684\u542f\u52a8\u662f\u4ece\u7528\u6237\u70b9\u51fb\u684c\u9762\u7684icon\u5f00\u59cb\u7684\uff0c\u5f53\u6211\u4eec\u70b9\u51fb\u5c4f\u5e55\u4e0a\u7684\u8f6f\u4ef6\u56fe\u6807\u65f6\uff0c\u5c31\u53ef\u4ee5\u6253\u5f00\u8fd9\u4e2a\u8f6f\u4ef6\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u770b\u4f3c\u4e5f\u5f88\u7b80\u5355\uff0c\u5176\u5b9e\u4e2d\u95f4\u5305\u542b\u4e86\u5f88\u591a\u7684\u5e95\u5c42\u4ea4\u4e92\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4f1a\u4ece\u6e90\u7801\u89d2\u5ea6\u4e00\u6b65\u4e00\u6b65\u5206\u6790\u8fd9\u4e2a\u6d41\u7a0b\uff0c\u770b\u4e86\u4e0d\u660e\u767d\u7684\uff0c\u6b22\u8fce\u6765\u6253\u6211\u3002\u3002 \u542f\u52a8\u6d41\u7a0b\u4e00\uff08Launcher\uff09 \u00b6 \u6211\u4eec\u624b\u673a\u684c\u9762\u2014\u2014Launcher\u5176\u5b9e\u4e5f\u662f\u4e00\u4e2aapp\uff0c\u6211\u4eec\u6240\u770b\u89c1\u7684\u662f\u5b83\u7684\u4e00\u4e2aactivity\uff0c\u91cc\u9762\u662f\u4e00\u4e2aRecyclerView\u5305\u88f9\u7740\u6240\u6709\u7684\u5e94\u7528\u56fe\u6807\uff0c\u56fe\u6807\u4e2d\u5305\u542b\u5b89\u88c5apk\u65f6\u89e3\u6790\u7684\u5e94\u7528\u9ed8\u8ba4\u542f\u52a8\u9875\u7b49\u4fe1\u606f\uff0c\u5728\u70b9\u51fb\u5e94\u7528\u56fe\u6807\u65f6\uff0c\u5373\u5c06\u8981\u542f\u52a8\u7684App\u548cLauncher\u3001AMS\u3001Zygote\u90fd\u8fd0\u884c\u5728\u4e0d\u540c\u8fdb\u7a0b\u4e2d\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e4b\u95f4\u7684\u901a\u4fe1\u662f\u901a\u8fc7binder\u53bb\u5b8c\u6210\u7684\uff0c\u6240\u4ee5AMS\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002\u4e0b\u9762\u6211\u4eec\u901a\u8fc7\u6e90\u7801\u6765\u770b\u4e0b\uff1a Launcher\u5411AMS\u53d1\u9001\u542f\u52a8Activity \u00b6 \u5f53\u7528\u6237\u70b9\u51fb\u5e94\u7528\u56fe\u6807\u65f6\uff0c\u8c03\u7528startActivitySafely\u65b9\u6cd5\uff1a packages/apps/Launcher3/src/com/android/launcher3/Launcher.java @Override public boolean startActivitySafely ( View v , Intent intent , ItemInfo item , @Nullable String sourceContainer ) { if ( ! hasBeenResumed ()) { addOnResumeCallback (() -> startActivitySafely ( v , intent , item , sourceContainer )); if ( mOnDeferredActivityLaunchCallback != null ) { mOnDeferredActivityLaunchCallback . run (); mOnDeferredActivityLaunchCallback = null ; } return true ; } boolean success = super . startActivitySafely ( v , intent , item , sourceContainer ); if ( success && v instanceof BubbleTextView ) { BubbleTextView btv = ( BubbleTextView ) v ; btv . setStayPressed ( true ); addOnResumeCallback ( btv ); } return success ; } \u6700\u7ec8\u4f1a\u8d70\u5230startActivity\u4e2d\uff1a @Override public void startActivity ( Intent intent ) { this . startActivity ( intent , null ); } @Override public void startActivity ( Intent intent , @Nullable Bundle options ) { if ( mIntent != null && mIntent . hasExtra ( AutofillManager . EXTRA_RESTORE_SESSION_TOKEN ) && mIntent . hasExtra ( AutofillManager . EXTRA_RESTORE_CROSS_ACTIVITY )) { if ( TextUtils . equals ( getPackageName (), intent . resolveActivity ( getPackageManager ()). getPackageName ())) { // Apply Autofill restore mechanism on the started activity by startActivity() final IBinder token = mIntent . getIBinderExtra ( AutofillManager . EXTRA_RESTORE_SESSION_TOKEN ); // Remove restore ability from current activity mIntent . removeExtra ( AutofillManager . EXTRA_RESTORE_SESSION_TOKEN ); mIntent . removeExtra ( AutofillManager . EXTRA_RESTORE_CROSS_ACTIVITY ); // Put restore token intent . putExtra ( AutofillManager . EXTRA_RESTORE_SESSION_TOKEN , token ); intent . putExtra ( AutofillManager . EXTRA_RESTORE_CROSS_ACTIVITY , true ); } } if ( options != null ) { //-1\u4e3arequestCode\u8868\u660e\u4e0d\u9700\u8981\u77e5\u9053\u662f\u5426\u542f\u52a8\u6210\u529f startActivityForResult ( intent , - 1 , options ); } else { startActivityForResult ( intent , - 1 ); } } \u8c03\u7528startActivityForResult\uff1a\u8fdb\u5165\u770b\u4e0b public void startActivityForResult ( @RequiresPermission Intent intent , int requestCode , @Nullable Bundle options ) { if ( mParent == null ) { options = transferSpringboardActivityOptions ( options ); Instrumentation . ActivityResult ar = mInstrumentation . execStartActivity ( this , mMainThread . getApplicationThread (), mToken , this , intent , requestCode , options ); ... } else { ... } } \u6bcf\u4e2aactivity\u90fd\u6301\u6709\u4e00\u4e2aInstrumentation\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e2d\u4f20\u5165\u4e86mMainThread.getApplicationThread()\uff0c\u5b83\u83b7\u53d6\u5230\u7684\u662fActivityThread\u7684\u5185\u90e8\u7c7bApplicationThread\uff0c\u8fd9\u662f\u4e00\u4e2aBinder\u5bf9\u8c61\uff0c\u4e4b\u540eAMS\u901a\u8fc7\u6b64\u5bf9\u8c61\u4e0eapp\u901a\u4fe1 public ActivityResult execStartActivity ( Context who , IBinder contextThread , IBinder token , Activity target , Intent intent , int requestCode , Bundle options ) { ... try { int result = ActivityTaskManager . getService (). startActivity ( whoThread , who . getBasePackageName (), who . getAttributionTag (), intent , intent . resolveTypeIfNeeded ( who . getContentResolver ()), token , target != null ? target . mEmbeddedID : null , requestCode , 0 , null , options ); ... } return null ; } public static IActivityTaskManager getService () { return IActivityTaskManagerSingleton . get (); } @UnsupportedAppUsage ( trackingBug = 129726065 ) private static final Singleton < IActivityTaskManager > IActivityTaskManagerSingleton = new Singleton < IActivityTaskManager > () { @Override protected IActivityTaskManager create () { final IBinder b = ServiceManager . getService ( Context . ACTIVITY_TASK_SERVICE ); return IActivityTaskManager . Stub . asInterface ( b ); } }; \u8fd9\u4e00\u6b65Launcher\u5f00\u59cb\u5411AMS\u901a\u4fe1\uff0cIActivityTaskManager\u662f\u4e00\u4e2a\u4ee3\u7406AMS\u7aefBinder\u7684\u5bf9\u8c61\uff0c\u4e4b\u540eAMS\u5f00\u59cbstartActivity\u3002 \u5230\u8fd9\u91ccLauncher\u5411AMS\u8bf7\u6c42\u542f\u52a8\u4e00\u4e2aActivity\u7684\u6d41\u7a0b\u5c31\u7ed3\u675f\u4e86\u3002 \u542f\u52a8\u6d41\u7a0b\u4e8c\uff08AMS\uff09 \u00b6 AMS\u542f\u52a8Activity \u00b6 \u73b0\u5728\u6d41\u7a0b\u8d70\u5230\u4e86AMS\u8fdb\u7a0b\u4e2d\uff0c\u4e0a\u9762\u901a\u8fc7\u4ee3\u7406\u8c03\u7528\u4e86ATMS\u7684startActivity\u65b9\u6cd5\uff1a @Override public final int startActivity ( IApplicationThread caller , String callingPackage , String callingFeatureId , Intent intent , String resolvedType , IBinder resultTo , String resultWho , int requestCode , int startFlags , ProfilerInfo profilerInfo , Bundle bOptions ) { return startActivityAsUser ( caller , callingPackage , callingFeatureId , intent , resolvedType , resultTo , resultWho , requestCode , startFlags , profilerInfo , bOptions , UserHandle . getCallingUserId ()); } @Override public int startActivityAsUser ( IApplicationThread caller , String callingPackage , String callingFeatureId , Intent intent , String resolvedType , IBinder resultTo , String resultWho , int requestCode , int startFlags , ProfilerInfo profilerInfo , Bundle bOptions , int userId ) { return startActivityAsUser ( caller , callingPackage , callingFeatureId , intent , resolvedType , resultTo , resultWho , requestCode , startFlags , profilerInfo , bOptions , userId , true /*validateIncomingUser*/ ); } private int startActivityAsUser ( IApplicationThread caller , String callingPackage , @Nullable String callingFeatureId , Intent intent , String resolvedType , IBinder resultTo , String resultWho , int requestCode , int startFlags , ProfilerInfo profilerInfo , Bundle bOptions , int userId , boolean validateIncomingUser ) { assertPackageMatchesCallingUid ( callingPackage ); enforceNotIsolatedCaller ( \"startActivityAsUser\" ); userId = getActivityStartController (). checkTargetUser ( userId , validateIncomingUser , Binder . getCallingPid (), Binder . getCallingUid (), \"startActivityAsUser\" ); // TODO: Switch to user app stacks here. return getActivityStartController (). obtainStarter ( intent , \"startActivityAsUser\" ) . setCaller ( caller ) . setCallingPackage ( callingPackage ) . setCallingFeatureId ( callingFeatureId ) . setResolvedType ( resolvedType ) . setResultTo ( resultTo ) . setResultWho ( resultWho ) . setRequestCode ( requestCode ) . setStartFlags ( startFlags ) . setProfilerInfo ( profilerInfo ) . setActivityOptions ( bOptions ) . setUserId ( userId ) . execute (); } \u4e0a\u9762\u90fd\u662f\u4e00\u4e9b\u6743\u9650\u68c0\u67e5\uff0c\u901a\u8fc7\u4e00\u8fde\u4e32\u8c03\u7528\uff0c\u8d70\u5230\u4e86ActivityStarter\u91cc\uff0c\u8c03\u7528\u4e86execute\uff1a int execute () { ... res = executeRequest ( mRequest ); ... } private int executeRequest ( Request request ) { ... mLastStartActivityResult = startActivityUnchecked ( r , sourceRecord , voiceSession , request . voiceInteractor , startFlags , true /* doResume */ , checkedOptions , inTask , restrictedBgActivity , intentGrants ); ... return mLastStartActivityResult ; } \u63a5\u7740\u8c03\u7528\u4e86startActivityUnchecked\u65b9\u6cd5\uff0c\u7ee7\u7eed\u770b\u8fd9\u4e2a\u65b9\u6cd5\uff1a private int startActivityUnchecked ( final ActivityRecord r , ActivityRecord sourceRecord , IVoiceInteractionSession voiceSession , IVoiceInteractor voiceInteractor , int startFlags , boolean doResume , ActivityOptions options , Task inTask , boolean restrictedBgActivity , NeededUriGrants intentGrants ) { ... result = startActivityInner ( r , sourceRecord , voiceSession , voiceInteractor , startFlags , doResume , options , inTask , restrictedBgActivity , intentGrants ); ... return result ; } int startActivityInner ( final ActivityRecord r , ActivityRecord sourceRecord , IVoiceInteractionSession voiceSession , IVoiceInteractor voiceInteractor , int startFlags , boolean doResume , ActivityOptions options , Task inTask , boolean restrictedBgActivity , NeededUriGrants intentGrants ) { ... mRootWindowContainer . resumeFocusedStacksTopActivities ( mTargetStack , mStartActivity , mOptions ); ... } boolean resumeFocusedStacksTopActivities ( ActivityStack targetStack , ActivityRecord target , ActivityOptions targetOptions ) { ... if ( ! resumedOnDisplay ) { final ActivityStack focusedStack = display . getFocusedStack (); if ( focusedStack != null ) { result |= focusedStack . resumeTopActivityUncheckedLocked ( target , targetOptions ); } else if ( targetStack == null ) { result |= resumeHomeActivity ( null /* prev */ , \"no-focusable-task\" , display . getDefaultTaskDisplayArea ()); } } } return result ; } \u8fd9\u91cc\u4f1a\u8c03\u7528resumeTopActivityUncheckedLocked\uff1a boolean resumeTopActivityUncheckedLocked ( ActivityRecord prev , ActivityOptions options ) { ... result = resumeTopActivityInnerLocked ( prev , options ); ... return result ; } \u7ee7\u7eed\u8d70\u5230resumeTopActivityInnerLocked\uff1a private boolean resumeTopActivityInnerLocked ( ActivityRecord prev , ActivityOptions options ) { ... if ( mResumedActivity != null ) { pausing |= startPausingLocked ( userLeaving , false , next ); } mStackSupervisor . startSpecificActivity ( next , true , true ); ... } startPausingLocked\u65b9\u6cd5\u4e3b\u8981\u662f\u901a\u77e5Launcher\u8fdb\u5165Pause\u72b6\u6001\uff0c\u5728\u5b83\u8fdb\u5165\u8fd9\u4e2a\u72b6\u6001\u540e\uff0c\u5728ActivityStackSupervisor\u7684startSpecificActivity\u65b9\u6cd5\u91cc\u5224\u65ad\u65b0\u7684app\u8fdb\u7a0b\u72b6\u6001\u505a\u51fa\u4e0d\u540c\u54cd\u5e94\u3002\u4e00\u8d77\u770b\u4e0b\u8fd9\u4e2a\u65b9\u6cd5\uff1a void startSpecificActivity ( ActivityRecord r , boolean andResume , boolean checkConfig ) { // \u83b7\u53d6\u542f\u52a8\u7684activity\u8fdb\u7a0b\u4fe1\u606f final WindowProcessController wpc = mService . getProcessController ( r . processName , r . info . applicationInfo . uid ); boolean knownToBeDead = false ; //\u5982\u679c\u8fdb\u7a0b\u5b58\u5728\uff0c\u5e76\u4e14\u8fdb\u7a0b\u4e2d\u6709\u7ebf\u7a0b\u5b58\u5728\uff0c\u5c31\u542f\u52a8\u4e00\u4e2a\u540c\u5e94\u7528\u7684activity if ( wpc != null && wpc . hasThread ()) { try { realStartActivityLocked ( r , wpc , andResume , checkConfig ); return ; } catch ( RemoteException e ) { Slog . w ( TAG , \"Exception when starting activity \" + r . intent . getComponent (). flattenToShortString (), e ); } // If a dead object exception was thrown -- fall through to // restart the application. knownToBeDead = true ; } //\u5426\u5219\u901a\u8fc7AMS\u5411Zygote\u8fdb\u7a0b\u8bf7\u6c42\u521b\u5efa\u65b0\u8fdb\u7a0b r . notifyUnknownVisibilityLaunchedForKeyguardTransition (); final boolean isTop = andResume && r . isTopRunningActivity (); mService . startProcessAsync ( r , knownToBeDead , isTop , isTop ? \"top-activity\" : \"activity\" ); } \u5230\u8fd9\u91cc\u5c31\u5b8c\u6210\u4e86Launcher\u548cAMS\u7684\u901a\u4fe1\u3001\u4ee5\u53caAMS\u548czygote\u7684\u901a\u4fe1\uff0c\u63a5\u4e0b\u6765\u521b\u5efa\u8981\u542f\u52a8\u7684app\u7684\u7ebf\u7a0b\uff0c\u4e5f\u5c31\u662fActivityThread\u3002 \u542f\u52a8\u6d41\u7a0b\u4e09\uff08app\uff09 \u00b6 \u65b0\u7684\u8fdb\u7a0b\u542f\u52a8 \u00b6 \u4e0a\u9762\u8bf4\u5230zygote\u542f\u52a8\u65b0\u7684\u8fdb\u7a0b\u65f6\u6807\u8bb0ActivityThread.main\u51fd\u6570\uff0c\u5728zygote\u521b\u5efa\u597d\u65b0\u8fdb\u7a0b\u540e\u53cd\u5c04\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c\u73b0\u5728\u5904\u4e8e\u65b0\u7684app\u8fdb\u7a0b\u4e2d\u3002 public static void main ( String [] args ) { ... Looper . prepareMainLooper (); ... ActivityThread thread = new ActivityThread (); thread . attach ( false , startSeq ); ... Looper . loop (); } private void attach ( boolean system , long startSeq ) { ... try { mgr . attachApplication ( mAppThread , startSeq ); } catch ( RemoteException ex ) { throw ex . rethrowFromSystemServer (); } ... } } @Override public final void attachApplication ( IApplicationThread thread , long startSeq ) { synchronized ( this ) { ... attachApplicationLocked ( thread , callingPid , callingUid , startSeq ); ... } } private boolean attachApplicationLocked ( @NonNull IApplicationThread thread , int pid , int callingUid , long startSeq ) { ... //1 thread . bindApplication ( processName , appInfo , providerList , instr2 . mClass , profilerInfo , instr2 . mArguments , instr2 . mWatcher , instr2 . mUiAutomationConnection , testMode , mBinderTransactionTrackingEnabled , enableTrackAllocation , isRestrictedBackupMode || ! normalMode , app . isPersistent (), new Configuration ( app . getWindowProcessController (). getConfiguration ()), app . compat , getCommonServicesLocked ( app . isolated ), mCoreSettingsObserver . getCoreSettingsLocked (), buildSerial , autofillOptions , contentCaptureOptions , app . mDisabledCompatChanges ); if ( normalMode ) { try { //2 didSomething = mAtmInternal . attachApplication ( app . getWindowProcessController ()); } catch ( Exception e ) { Slog . wtf ( TAG , \"Exception thrown launching activities in \" + app , e ); badApp = true ; } } } \u8fd9\u91cc\u4e3b\u8981\u521b\u5efa\u4e86Looper\u548cActivityThread\u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5e94\u7528ApplicationThread\u6ce8\u518c\u5230AMS\u4e2d\uff0cApplicationThread\u662fActivityThread\u7684\u5185\u90e8\u7c7b\u5b9e\u73b0\u4e86IApplicationThread.Stub\u7528\u6b64\u5bf9\u8c61\u53ef\u8de8\u8fdb\u7a0b\u901a\u4fe1\u3002 \u6211\u4eec\u5206\u4e24\u6b65\u770b\u8fd9\u4e2a\u903b\u8f91\uff1a 1\u3001\u5728AMS\u7ed1\u5b9aApplicationThread\u65f6\uff0c\u53d1\u9001\u4e86\u4e00\u4e2aH.BIND_APPLICATION\u7684Message\uff0c\u5728Handler\u4e2d\u5904\u7406\u8be5\u6d88\u606f\u65f6\u8c03\u7528\u4e86Application\u7684onCreate\u65b9\u6cd5\u3002 @Override public final void bindApplication ( String processName , ApplicationInfo appInfo , ProviderInfoList providerList , ComponentName instrumentationName , ProfilerInfo profilerInfo , Bundle instrumentationArgs , IInstrumentationWatcher instrumentationWatcher , IUiAutomationConnection instrumentationUiConnection , int debugMode , boolean enableBinderTracking , boolean trackAllocation , boolean isRestrictedBackupMode , boolean persistent , Configuration config , CompatibilityInfo compatInfo , Map services , Bundle coreSettings , String buildSerial , AutofillOptions autofillOptions , ContentCaptureOptions contentCaptureOptions , long [] disabledCompatChanges ) { ... sendMessage ( H . BIND_APPLICATION , data ); } public void handleMessage ( Message msg ) { if ( DEBUG_MESSAGES ) Slog . v ( TAG , \">>> handling: \" + codeToString ( msg . what )); switch ( msg . what ) { case BIND_APPLICATION : Trace . traceBegin ( Trace . TRACE_TAG_ACTIVITY_MANAGER , \"bindApplication\" ); AppBindData data = ( AppBindData ) msg . obj ; handleBindApplication ( data ); Trace . traceEnd ( Trace . TRACE_TAG_ACTIVITY_MANAGER ); break ; ... } } private void handleBindApplication ( AppBindData data ) { ... mInstrumentation . callApplicationOnCreate ( app ); ... } //Application.java public void onCreate () { } \u5230\u8fd9\u91cc\u4e3a\u6b62\uff0c\u65b0\u7684app\u7ebf\u7a0b\u5df2\u7ecf\u542f\u52a8\u5e76\u4e14\u7ed1\u5b9a\u4e86Application \u521b\u5efaactivity \u00b6 2\u3001\u5728mAtmInternal\u7684attachApplication\u4e2d\u901a\u8fc7\u5c42\u5c42\u8c03\u7528\u5230ActivityStackSupervisor.realStartActivityLocked\u65b9\u6cd5\u3002 boolean realStartActivityLocked ( ActivityRecord r , WindowProcessController proc , boolean andResume , boolean checkConfig ) throws RemoteException { ... // \u521b\u5efaactivity\u542f\u52a8\u4e8b\u52a1 final ClientTransaction clientTransaction = ClientTransaction . obtain ( proc . getThread (), r . appToken ); final DisplayContent dc = r . getDisplay (). mDisplayContent ; clientTransaction . addCallback ( LaunchActivityItem . obtain ( new Intent ( r . intent ), System . identityHashCode ( r ), r . info , mergedConfiguration . getGlobalConfiguration (), mergedConfiguration . getOverrideConfiguration (), r . compat , r . launchedFromPackage , task . voiceInteractor , proc . getReportedProcState (), r . getSavedState (), r . getPersistentSavedState (), results , newIntents , dc . isNextTransitionForward (), proc . createProfilerInfoIfNeeded (), r . assistToken , r . createFixedRotationAdjustmentsIfNeeded ())); // Set desired final state. final ActivityLifecycleItem lifecycleItem ; if ( andResume ) { lifecycleItem = ResumeActivityItem . obtain ( dc . isNextTransitionForward ()); } else { lifecycleItem = PauseActivityItem . obtain (); } clientTransaction . setLifecycleStateRequest ( lifecycleItem ); //\u6267\u884cclientTransaction mService . getLifecycleManager (). scheduleTransaction ( clientTransaction ); ... } ClientTransaction\u7ba1\u7406\u4e86activity\u7684\u542f\u52a8\u4fe1\u606f\uff0c\u901a\u8fc7ClientLifecycleManager\u6267\u884c\uff0c\u8c03\u7528 scheduleTransaction\u65b9\u6cd5\uff0c\u770b\u4e0b\u8fd9\u4e2a\u65b9\u6cd5\uff1a void scheduleTransaction ( ClientTransaction transaction ) throws RemoteException { final IApplicationThread client = transaction . getClient (); transaction . schedule (); if ( ! ( client instanceof Binder )) { transaction . recycle (); } } \u8c03\u7528\u4e86ClientTransaction\u7c7b\u7684schedule\u65b9\u6cd5\uff1a public void schedule () throws RemoteException { mClient . scheduleTransaction ( this ); } mClient\u662f\u4e00\u4e2aIApplicationThread\u63a5\u53e3\uff0c\u4e0a\u9762\u6211\u4eec\u4e5f\u5206\u6790\u5230\uff0c\u5b83\u7684\u5b9e\u73b0\u662fApplicationThread\uff0c\u800cApplicationThread\u662fActivityThread\u7684\u5185\u90e8\u7c7b\uff0c\u6211\u4eec\u8fdb\u53bb\u770b\u4e0b\uff1a @Override public void scheduleTransaction ( ClientTransaction transaction ) throws RemoteException { ActivityThread . this . scheduleTransaction ( transaction ); } ApplicationThread\u7684scheduleTransaction\u65b9\u6cd5\u5176\u5b9e\u662f\u8c03\u7528\u4e86ActivityThread\u7684\u540c\u540d\u65b9\u6cd5\u3002\u800cActivityThread\u81ea\u8eab\u5e76\u6ca1\u6709\u5b9a\u4e49\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u800c\u662f\u7ee7\u627f\u81ea\u7236\u7c7bClientTransactionHandler\uff1a void scheduleTransaction ( ClientTransaction transaction ) { transaction . preExecute ( this ); sendMessage ( ActivityThread . H . EXECUTE_TRANSACTION , transaction ); } scheduleTransaction\u65b9\u6cd5\u4e2d\u53d1\u9001\u4e86EXECUTE_TRANSACTION\u6d88\u606f\u7ed9ActivityThread\u7684H\u7c7b\u5904\u7406\uff0cH\u80af\u5b9a\u662f\u7ee7\u627f\u81eaHandler\u4e86\uff0c\u6765\u770b\u4e0b\uff1a class H extends Handler { public void handleMessage ( Message msg ) { switch ( msg . what ) { ... case EXECUTE_TRANSACTION : final ClientTransaction transaction = ( ClientTransaction ) msg . obj ; mTransactionExecutor . execute ( transaction ); if ( isSystem ()) { transaction . recycle (); } break ; ... } } } \u901a\u8fc7handleMessage\u6765\u5904\u7406\u8fd9\u4e2a\u6d88\u606f\uff0c\u91cc\u9762\u53c8\u8c03\u7528\u4e86TransactionExecutor\u7684execute\u65b9\u6cd5\uff1a public void execute ( ClientTransaction transaction ) { ... executeCallbacks ( transaction ); executeLifecycleState ( transaction ); mPendingActions . clear (); } public void executeCallbacks ( ClientTransaction transaction ) { final List < ClientTransactionItem > callbacks = transaction . getCallbacks (); ... final int size = callbacks . size (); for ( int i = 0 ; i < size ; ++ i ) { final ClientTransactionItem item = callbacks . get ( i ); ... item . execute ( mTransactionHandler , token , mPendingActions ); } } private void executeLifecycleState ( ClientTransaction transaction ) { final ActivityLifecycleItem lifecycleItem = transaction . getLifecycleStateRequest (); //\u751f\u547d\u5468\u671f\u7684\u8fc7\u6e21 cycleToPath ( r , lifecycleItem . getTargetState (), true /* excludeLastState */ , transaction ); lifecycleItem . execute ( mTransactionHandler , token , mPendingActions ); lifecycleItem . postExecute ( mTransactionHandler , token , mPendingActions ); } \u8fd9\u91cc\u5206\u522b\u8c03\u7528\u4e86executeCallbacks\u548cexecuteLifecycleState\uff0c\u4e5f\u5c31\u662f\u4e8b\u52a1Callback\u548cLifecycleState\u7684execute\u65b9\u6cd5\uff0c\u8fd9\u91cc\u7684Callback\u548cLifecycleState\u662f\u5728ActivityStackSupervisor\u7684realStartActivityLocked\u6d41\u7a0b\u521b\u5efa\u7684\uff0c\u5206\u522b\u5bf9\u5e94\u7684\u662fLaunchActivityItem\u548cResumeActivityItem\u3002\u6765\u770b\u4e0b\u8fd9\u4e24\u4e2aexecute\u65b9\u6cd5\uff1a //LaunchActivityItem.java public void execute ( ClientTransactionHandler client , IBinder token , PendingTransactionActions pendingActions ) { ... client . handleLaunchActivity ( r , pendingActions , null /* customIntent */ ); } //ResumeActivityItem.java public void execute ( ClientTransactionHandler client , IBinder token , PendingTransactionActions pendingActions ) { ... client . handleResumeActivity ( token , true /* finalStateRequest */ , mIsForward , \"RESUME_ACTIVITY\" ); } \u53ef\u4ee5\u770b\u5230\u8fd9\u4e24\u4e2aexecute\u65b9\u6cd5\u91cc\u90fd\u662f\u8c03\u7528\u4e86ClientTransactionHandler\u6765\u5904\u7406activity\u7684\uff0c\u800c ClientTransactionHandler\u662f\u62bd\u8c61\u7c7b\uff0c\u6700\u7ec8\u53c8\u56de\u5230\u4e86ActivityThread\u7c7b\u4e2d\uff0c\u770b\u4e0b\uff1a public Activity handleLaunchActivity ( ActivityClientRecord r , ... final Activity a = performLaunchActivity ( r , customIntent ); return a ; } private Activity performLaunchActivity ( ActivityClientRecord r , Intent customIntent ) { //\u83b7\u53d6activity\u4fe1\u606f ActivityInfo aInfo = r . activityInfo ; //\u62ff\u5230\u542f\u52a8activity\u7684\u7ec4\u4ef6\u540d ComponentName component = r . intent . getComponent (); ... ContextImpl appContext = createBaseContextForActivity ( r ); Activity activity = null ; try { java . lang . ClassLoader cl = appContext . getClassLoader (); activity = mInstrumentation . newActivity ( cl , component . getClassName (), r . intent ); } ... try { Application app = r . packageInfo . makeApplication ( false , mInstrumentation ); ... activity . attach ( appContext , this , getInstrumentation (), r . token , r . ident , app , r . intent , r . activityInfo , title , r . parent , r . embeddedID , r . lastNonConfigurationInstances , config , r . referrer , r . voiceInteractor , window , r . configCallback , r . assistToken ); int theme = r . activityInfo . getThemeResource (); if ( theme != 0 ) { activity . setTheme ( theme ); } ... activity . mCalled = false ; if ( r . isPersistable ()) { mInstrumentation . callActivityOnCreate ( activity , r . state , r . persistentState ); } else { mInstrumentation . callActivityOnCreate ( activity , r . state ); } ... return activity ; } \u68b3\u7406\u4e0b\u8fd9\u4e2a\u65b9\u6cd5\u505a\u4e86\u54ea\u4e9b\u4e8b\u60c5\uff1a \u521b\u5efa\u542f\u52a8activity\u7684\u4e0a\u4e0b\u6587\u73af\u5883 \u901a\u8fc7Instrumentation\u7684newActivity\u65b9\u6cd5\uff0c\u4ee5\u53cd\u5c04\u5f62\u5f0f\u521b\u5efaactivity\u5b9e\u4f8b \u5982\u679cApplication\u4e0d\u5b58\u5728\u7684\u8bdd\u4f1a\u521b\u5efaApplication\u5e76\u8c03\u7528Application\u7684onCreate\u65b9\u6cd5 \u521d\u59cb\u5316activity\uff0c\u901a\u8fc7Activity\u7684attach\u65b9\u6cd5\uff0c\u5b9e\u4f8b\u5316Window\u5bf9\u8c61\uff0c\u5e76\u5b9e\u73b0Activity\u548cWindow\u76f8\u5173\u8054 \u901a\u8fc7Instrumentation\u8c03\u7528activity\u7684**onCreate**\u65b9\u6cd5 \u4e0ehandleLaunchActivity\u7c7b\u4f3c\u7684\uff0chandleResumeActivity\u5219\u662f\u8c03\u7528\u4e86performResumeActivity\u65b9\u6cd5\u3002\u5176\u5927\u4f53\u4e0a\u4f9d\u6b21\u505a\u4e86\uff1a \u5982\u679c\u9700\u8981\uff0c\u8c03\u7528\u5f85Resume Activity\u7684onNewIntent\u3001onActivityResult\u56de\u8c03\uff1b \u8c03\u7528Activity\u7684performResume\u65b9\u6cd5\uff0c\u5176\u4e2d\u8c03\u7528\u4e86**onResume**\u56de\u8c03\uff1b \u8fd9\u6837\uff0capp\u5c31\u542f\u52a8\u5b8c\u6210\u4e86\u3002 \u6700\u540e\uff0c\u7ed9\u5927\u5bb6\u770b\u4e0b\u6574\u4f53\u7684\u6d41\u7a0b\u56fe\uff08\u5176\u5b9e\u662f\u4ece\u7f51\u4e0a\u76d7\u7684\u56fe.......\u54c8\u54c8\uff09 \u603b\u7ed3 \u00b6 \u901a\u8fc7\u4e0a\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u57fa\u672c\u628aapp\u542f\u52a8\u6d41\u7a0b\u8d70\u5b8c\u4e86\uff0c\u770b\u8d77\u6765\u6bd4\u8f83\u590d\u6742\uff0c\u5176\u5b9e\u901a\u8fc7\u6574\u4f53\u5206\u6790\uff0c\u8fd8\u662f\u80fd\u8d70\u901a\u7684\uff0c\u9047\u5230\u6d41\u7a0b\u4e0d\u901a\u65f6\uff0c\u4e5f\u53ef\u4ee5debug\u3002 \u70b9\u51fb\u56fe\u6807\uff0cLauncher\u5411AMS\u8bf7\u6c42\u542f\u52a8app AMS\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u8bb0\u5f55app\u7684\u4fe1\u606f\uff0c\u5e76\u544a\u77e5Launcher\u8fdb\u5165pause\u72b6\u6001 Launcher\u8fdb\u5165pause\u72b6\u6001\u540e\uff0c\u544a\u77e5AMS AMS\u68c0\u6d4b\u65b0\u7684app\u8fdb\u7a0b\u65f6\u5019\u5df2\u7ecf\u542f\u52a8\uff0c\u5426\u5219\u901a\u8fc7Zygote\u521b\u5efa\u65b0\u7684\u8fdb\u7a0b\u5e76\u542f\u52a8ActivityThread\u7684main\u65b9\u6cd5 \u8fdb\u7a0b\u521b\u5efa\u597d\u540e\uff0c\u8c03\u7528\u4e0a\u9762\u7684ActivityThread.main() ActivityThread\u4e2dH\u5904\u7406\u9700\u8981\u542f\u52a8Activity\u7684\u8bf7\u6c42\u6d88\u606f \u672c\u4eba\u80fd\u529b\u6709\u9650\uff0c\u5728\u5206\u6790\u8fc7\u7a0b\u4e2d\uff0c\u4ee3\u7801\u6709\u6240\u5220\u51cf\uff0c\u5982\u679c\u6587\u7ae0\u4e2d\u6709\u5199\u5f97\u4e0d\u5bf9\u7684\u5730\u65b9\uff0c\u6b22\u8fce\u5728\u7559\u8a00\u533a\u7559\u8a00\u5927\u5bb6\u4e00\u8d77\u8ba8\u8bba\uff0c\u5171\u540c\u5b66\u4e60\u8fdb\u6b65\u3002\u5982\u679c\u89c9\u5f97\u6211\u7684\u6587\u7ae0\u7ed9\u4e88\u4f60\u5e2e\u52a9\uff0c\u4e5f\u8bf7\u7ed9\u6211\u4e00\u4e2a\u559c\u6b22\u548c\u5173\u6ce8\u3002","title":"app\u542f\u52a8\u6d41\u7a0b"},{"location":"android/app_startup/#appandroid11","text":"\u524d\u4e24\u5929\u5206\u6790\u4e86Android\u7cfb\u7edf\u7684\u542f\u52a8\u6d41\u7a0b\u540e\uff0c\u6211\u4eec\u77e5\u9053Android\u7cfb\u7edf\u542f\u52a8\u6700\u7ec8\u4f1a\u8d70\u5230Launcher\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u6240\u770b\u89c1\u7684\u201d\u684c\u9762\u201c\uff0capp\u7684\u542f\u52a8\u662f\u4ece\u7528\u6237\u70b9\u51fb\u684c\u9762\u7684icon\u5f00\u59cb\u7684\uff0c\u5f53\u6211\u4eec\u70b9\u51fb\u5c4f\u5e55\u4e0a\u7684\u8f6f\u4ef6\u56fe\u6807\u65f6\uff0c\u5c31\u53ef\u4ee5\u6253\u5f00\u8fd9\u4e2a\u8f6f\u4ef6\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u770b\u4f3c\u4e5f\u5f88\u7b80\u5355\uff0c\u5176\u5b9e\u4e2d\u95f4\u5305\u542b\u4e86\u5f88\u591a\u7684\u5e95\u5c42\u4ea4\u4e92\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4f1a\u4ece\u6e90\u7801\u89d2\u5ea6\u4e00\u6b65\u4e00\u6b65\u5206\u6790\u8fd9\u4e2a\u6d41\u7a0b\uff0c\u770b\u4e86\u4e0d\u660e\u767d\u7684\uff0c\u6b22\u8fce\u6765\u6253\u6211\u3002\u3002","title":"app\u542f\u52a8\u6d41\u7a0b\u2014\u2014\u57fa\u4e8eAndroid11\u5206\u6790"},{"location":"android/app_startup/#launcher","text":"\u6211\u4eec\u624b\u673a\u684c\u9762\u2014\u2014Launcher\u5176\u5b9e\u4e5f\u662f\u4e00\u4e2aapp\uff0c\u6211\u4eec\u6240\u770b\u89c1\u7684\u662f\u5b83\u7684\u4e00\u4e2aactivity\uff0c\u91cc\u9762\u662f\u4e00\u4e2aRecyclerView\u5305\u88f9\u7740\u6240\u6709\u7684\u5e94\u7528\u56fe\u6807\uff0c\u56fe\u6807\u4e2d\u5305\u542b\u5b89\u88c5apk\u65f6\u89e3\u6790\u7684\u5e94\u7528\u9ed8\u8ba4\u542f\u52a8\u9875\u7b49\u4fe1\u606f\uff0c\u5728\u70b9\u51fb\u5e94\u7528\u56fe\u6807\u65f6\uff0c\u5373\u5c06\u8981\u542f\u52a8\u7684App\u548cLauncher\u3001AMS\u3001Zygote\u90fd\u8fd0\u884c\u5728\u4e0d\u540c\u8fdb\u7a0b\u4e2d\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e4b\u95f4\u7684\u901a\u4fe1\u662f\u901a\u8fc7binder\u53bb\u5b8c\u6210\u7684\uff0c\u6240\u4ee5AMS\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002\u4e0b\u9762\u6211\u4eec\u901a\u8fc7\u6e90\u7801\u6765\u770b\u4e0b\uff1a","title":"\u542f\u52a8\u6d41\u7a0b\u4e00\uff08Launcher\uff09"},{"location":"android/app_startup/#launcheramsactivity","text":"\u5f53\u7528\u6237\u70b9\u51fb\u5e94\u7528\u56fe\u6807\u65f6\uff0c\u8c03\u7528startActivitySafely\u65b9\u6cd5\uff1a packages/apps/Launcher3/src/com/android/launcher3/Launcher.java @Override public boolean startActivitySafely ( View v , Intent intent , ItemInfo item , @Nullable String sourceContainer ) { if ( ! hasBeenResumed ()) { addOnResumeCallback (() -> startActivitySafely ( v , intent , item , sourceContainer )); if ( mOnDeferredActivityLaunchCallback != null ) { mOnDeferredActivityLaunchCallback . run (); mOnDeferredActivityLaunchCallback = null ; } return true ; } boolean success = super . startActivitySafely ( v , intent , item , sourceContainer ); if ( success && v instanceof BubbleTextView ) { BubbleTextView btv = ( BubbleTextView ) v ; btv . setStayPressed ( true ); addOnResumeCallback ( btv ); } return success ; } \u6700\u7ec8\u4f1a\u8d70\u5230startActivity\u4e2d\uff1a @Override public void startActivity ( Intent intent ) { this . startActivity ( intent , null ); } @Override public void startActivity ( Intent intent , @Nullable Bundle options ) { if ( mIntent != null && mIntent . hasExtra ( AutofillManager . EXTRA_RESTORE_SESSION_TOKEN ) && mIntent . hasExtra ( AutofillManager . EXTRA_RESTORE_CROSS_ACTIVITY )) { if ( TextUtils . equals ( getPackageName (), intent . resolveActivity ( getPackageManager ()). getPackageName ())) { // Apply Autofill restore mechanism on the started activity by startActivity() final IBinder token = mIntent . getIBinderExtra ( AutofillManager . EXTRA_RESTORE_SESSION_TOKEN ); // Remove restore ability from current activity mIntent . removeExtra ( AutofillManager . EXTRA_RESTORE_SESSION_TOKEN ); mIntent . removeExtra ( AutofillManager . EXTRA_RESTORE_CROSS_ACTIVITY ); // Put restore token intent . putExtra ( AutofillManager . EXTRA_RESTORE_SESSION_TOKEN , token ); intent . putExtra ( AutofillManager . EXTRA_RESTORE_CROSS_ACTIVITY , true ); } } if ( options != null ) { //-1\u4e3arequestCode\u8868\u660e\u4e0d\u9700\u8981\u77e5\u9053\u662f\u5426\u542f\u52a8\u6210\u529f startActivityForResult ( intent , - 1 , options ); } else { startActivityForResult ( intent , - 1 ); } } \u8c03\u7528startActivityForResult\uff1a\u8fdb\u5165\u770b\u4e0b public void startActivityForResult ( @RequiresPermission Intent intent , int requestCode , @Nullable Bundle options ) { if ( mParent == null ) { options = transferSpringboardActivityOptions ( options ); Instrumentation . ActivityResult ar = mInstrumentation . execStartActivity ( this , mMainThread . getApplicationThread (), mToken , this , intent , requestCode , options ); ... } else { ... } } \u6bcf\u4e2aactivity\u90fd\u6301\u6709\u4e00\u4e2aInstrumentation\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e2d\u4f20\u5165\u4e86mMainThread.getApplicationThread()\uff0c\u5b83\u83b7\u53d6\u5230\u7684\u662fActivityThread\u7684\u5185\u90e8\u7c7bApplicationThread\uff0c\u8fd9\u662f\u4e00\u4e2aBinder\u5bf9\u8c61\uff0c\u4e4b\u540eAMS\u901a\u8fc7\u6b64\u5bf9\u8c61\u4e0eapp\u901a\u4fe1 public ActivityResult execStartActivity ( Context who , IBinder contextThread , IBinder token , Activity target , Intent intent , int requestCode , Bundle options ) { ... try { int result = ActivityTaskManager . getService (). startActivity ( whoThread , who . getBasePackageName (), who . getAttributionTag (), intent , intent . resolveTypeIfNeeded ( who . getContentResolver ()), token , target != null ? target . mEmbeddedID : null , requestCode , 0 , null , options ); ... } return null ; } public static IActivityTaskManager getService () { return IActivityTaskManagerSingleton . get (); } @UnsupportedAppUsage ( trackingBug = 129726065 ) private static final Singleton < IActivityTaskManager > IActivityTaskManagerSingleton = new Singleton < IActivityTaskManager > () { @Override protected IActivityTaskManager create () { final IBinder b = ServiceManager . getService ( Context . ACTIVITY_TASK_SERVICE ); return IActivityTaskManager . Stub . asInterface ( b ); } }; \u8fd9\u4e00\u6b65Launcher\u5f00\u59cb\u5411AMS\u901a\u4fe1\uff0cIActivityTaskManager\u662f\u4e00\u4e2a\u4ee3\u7406AMS\u7aefBinder\u7684\u5bf9\u8c61\uff0c\u4e4b\u540eAMS\u5f00\u59cbstartActivity\u3002 \u5230\u8fd9\u91ccLauncher\u5411AMS\u8bf7\u6c42\u542f\u52a8\u4e00\u4e2aActivity\u7684\u6d41\u7a0b\u5c31\u7ed3\u675f\u4e86\u3002","title":"Launcher\u5411AMS\u53d1\u9001\u542f\u52a8Activity"},{"location":"android/app_startup/#ams","text":"","title":"\u542f\u52a8\u6d41\u7a0b\u4e8c\uff08AMS\uff09"},{"location":"android/app_startup/#amsactivity","text":"\u73b0\u5728\u6d41\u7a0b\u8d70\u5230\u4e86AMS\u8fdb\u7a0b\u4e2d\uff0c\u4e0a\u9762\u901a\u8fc7\u4ee3\u7406\u8c03\u7528\u4e86ATMS\u7684startActivity\u65b9\u6cd5\uff1a @Override public final int startActivity ( IApplicationThread caller , String callingPackage , String callingFeatureId , Intent intent , String resolvedType , IBinder resultTo , String resultWho , int requestCode , int startFlags , ProfilerInfo profilerInfo , Bundle bOptions ) { return startActivityAsUser ( caller , callingPackage , callingFeatureId , intent , resolvedType , resultTo , resultWho , requestCode , startFlags , profilerInfo , bOptions , UserHandle . getCallingUserId ()); } @Override public int startActivityAsUser ( IApplicationThread caller , String callingPackage , String callingFeatureId , Intent intent , String resolvedType , IBinder resultTo , String resultWho , int requestCode , int startFlags , ProfilerInfo profilerInfo , Bundle bOptions , int userId ) { return startActivityAsUser ( caller , callingPackage , callingFeatureId , intent , resolvedType , resultTo , resultWho , requestCode , startFlags , profilerInfo , bOptions , userId , true /*validateIncomingUser*/ ); } private int startActivityAsUser ( IApplicationThread caller , String callingPackage , @Nullable String callingFeatureId , Intent intent , String resolvedType , IBinder resultTo , String resultWho , int requestCode , int startFlags , ProfilerInfo profilerInfo , Bundle bOptions , int userId , boolean validateIncomingUser ) { assertPackageMatchesCallingUid ( callingPackage ); enforceNotIsolatedCaller ( \"startActivityAsUser\" ); userId = getActivityStartController (). checkTargetUser ( userId , validateIncomingUser , Binder . getCallingPid (), Binder . getCallingUid (), \"startActivityAsUser\" ); // TODO: Switch to user app stacks here. return getActivityStartController (). obtainStarter ( intent , \"startActivityAsUser\" ) . setCaller ( caller ) . setCallingPackage ( callingPackage ) . setCallingFeatureId ( callingFeatureId ) . setResolvedType ( resolvedType ) . setResultTo ( resultTo ) . setResultWho ( resultWho ) . setRequestCode ( requestCode ) . setStartFlags ( startFlags ) . setProfilerInfo ( profilerInfo ) . setActivityOptions ( bOptions ) . setUserId ( userId ) . execute (); } \u4e0a\u9762\u90fd\u662f\u4e00\u4e9b\u6743\u9650\u68c0\u67e5\uff0c\u901a\u8fc7\u4e00\u8fde\u4e32\u8c03\u7528\uff0c\u8d70\u5230\u4e86ActivityStarter\u91cc\uff0c\u8c03\u7528\u4e86execute\uff1a int execute () { ... res = executeRequest ( mRequest ); ... } private int executeRequest ( Request request ) { ... mLastStartActivityResult = startActivityUnchecked ( r , sourceRecord , voiceSession , request . voiceInteractor , startFlags , true /* doResume */ , checkedOptions , inTask , restrictedBgActivity , intentGrants ); ... return mLastStartActivityResult ; } \u63a5\u7740\u8c03\u7528\u4e86startActivityUnchecked\u65b9\u6cd5\uff0c\u7ee7\u7eed\u770b\u8fd9\u4e2a\u65b9\u6cd5\uff1a private int startActivityUnchecked ( final ActivityRecord r , ActivityRecord sourceRecord , IVoiceInteractionSession voiceSession , IVoiceInteractor voiceInteractor , int startFlags , boolean doResume , ActivityOptions options , Task inTask , boolean restrictedBgActivity , NeededUriGrants intentGrants ) { ... result = startActivityInner ( r , sourceRecord , voiceSession , voiceInteractor , startFlags , doResume , options , inTask , restrictedBgActivity , intentGrants ); ... return result ; } int startActivityInner ( final ActivityRecord r , ActivityRecord sourceRecord , IVoiceInteractionSession voiceSession , IVoiceInteractor voiceInteractor , int startFlags , boolean doResume , ActivityOptions options , Task inTask , boolean restrictedBgActivity , NeededUriGrants intentGrants ) { ... mRootWindowContainer . resumeFocusedStacksTopActivities ( mTargetStack , mStartActivity , mOptions ); ... } boolean resumeFocusedStacksTopActivities ( ActivityStack targetStack , ActivityRecord target , ActivityOptions targetOptions ) { ... if ( ! resumedOnDisplay ) { final ActivityStack focusedStack = display . getFocusedStack (); if ( focusedStack != null ) { result |= focusedStack . resumeTopActivityUncheckedLocked ( target , targetOptions ); } else if ( targetStack == null ) { result |= resumeHomeActivity ( null /* prev */ , \"no-focusable-task\" , display . getDefaultTaskDisplayArea ()); } } } return result ; } \u8fd9\u91cc\u4f1a\u8c03\u7528resumeTopActivityUncheckedLocked\uff1a boolean resumeTopActivityUncheckedLocked ( ActivityRecord prev , ActivityOptions options ) { ... result = resumeTopActivityInnerLocked ( prev , options ); ... return result ; } \u7ee7\u7eed\u8d70\u5230resumeTopActivityInnerLocked\uff1a private boolean resumeTopActivityInnerLocked ( ActivityRecord prev , ActivityOptions options ) { ... if ( mResumedActivity != null ) { pausing |= startPausingLocked ( userLeaving , false , next ); } mStackSupervisor . startSpecificActivity ( next , true , true ); ... } startPausingLocked\u65b9\u6cd5\u4e3b\u8981\u662f\u901a\u77e5Launcher\u8fdb\u5165Pause\u72b6\u6001\uff0c\u5728\u5b83\u8fdb\u5165\u8fd9\u4e2a\u72b6\u6001\u540e\uff0c\u5728ActivityStackSupervisor\u7684startSpecificActivity\u65b9\u6cd5\u91cc\u5224\u65ad\u65b0\u7684app\u8fdb\u7a0b\u72b6\u6001\u505a\u51fa\u4e0d\u540c\u54cd\u5e94\u3002\u4e00\u8d77\u770b\u4e0b\u8fd9\u4e2a\u65b9\u6cd5\uff1a void startSpecificActivity ( ActivityRecord r , boolean andResume , boolean checkConfig ) { // \u83b7\u53d6\u542f\u52a8\u7684activity\u8fdb\u7a0b\u4fe1\u606f final WindowProcessController wpc = mService . getProcessController ( r . processName , r . info . applicationInfo . uid ); boolean knownToBeDead = false ; //\u5982\u679c\u8fdb\u7a0b\u5b58\u5728\uff0c\u5e76\u4e14\u8fdb\u7a0b\u4e2d\u6709\u7ebf\u7a0b\u5b58\u5728\uff0c\u5c31\u542f\u52a8\u4e00\u4e2a\u540c\u5e94\u7528\u7684activity if ( wpc != null && wpc . hasThread ()) { try { realStartActivityLocked ( r , wpc , andResume , checkConfig ); return ; } catch ( RemoteException e ) { Slog . w ( TAG , \"Exception when starting activity \" + r . intent . getComponent (). flattenToShortString (), e ); } // If a dead object exception was thrown -- fall through to // restart the application. knownToBeDead = true ; } //\u5426\u5219\u901a\u8fc7AMS\u5411Zygote\u8fdb\u7a0b\u8bf7\u6c42\u521b\u5efa\u65b0\u8fdb\u7a0b r . notifyUnknownVisibilityLaunchedForKeyguardTransition (); final boolean isTop = andResume && r . isTopRunningActivity (); mService . startProcessAsync ( r , knownToBeDead , isTop , isTop ? \"top-activity\" : \"activity\" ); } \u5230\u8fd9\u91cc\u5c31\u5b8c\u6210\u4e86Launcher\u548cAMS\u7684\u901a\u4fe1\u3001\u4ee5\u53caAMS\u548czygote\u7684\u901a\u4fe1\uff0c\u63a5\u4e0b\u6765\u521b\u5efa\u8981\u542f\u52a8\u7684app\u7684\u7ebf\u7a0b\uff0c\u4e5f\u5c31\u662fActivityThread\u3002","title":"AMS\u542f\u52a8Activity"},{"location":"android/app_startup/#app","text":"","title":"\u542f\u52a8\u6d41\u7a0b\u4e09\uff08app\uff09"},{"location":"android/app_startup/#_1","text":"\u4e0a\u9762\u8bf4\u5230zygote\u542f\u52a8\u65b0\u7684\u8fdb\u7a0b\u65f6\u6807\u8bb0ActivityThread.main\u51fd\u6570\uff0c\u5728zygote\u521b\u5efa\u597d\u65b0\u8fdb\u7a0b\u540e\u53cd\u5c04\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c\u73b0\u5728\u5904\u4e8e\u65b0\u7684app\u8fdb\u7a0b\u4e2d\u3002 public static void main ( String [] args ) { ... Looper . prepareMainLooper (); ... ActivityThread thread = new ActivityThread (); thread . attach ( false , startSeq ); ... Looper . loop (); } private void attach ( boolean system , long startSeq ) { ... try { mgr . attachApplication ( mAppThread , startSeq ); } catch ( RemoteException ex ) { throw ex . rethrowFromSystemServer (); } ... } } @Override public final void attachApplication ( IApplicationThread thread , long startSeq ) { synchronized ( this ) { ... attachApplicationLocked ( thread , callingPid , callingUid , startSeq ); ... } } private boolean attachApplicationLocked ( @NonNull IApplicationThread thread , int pid , int callingUid , long startSeq ) { ... //1 thread . bindApplication ( processName , appInfo , providerList , instr2 . mClass , profilerInfo , instr2 . mArguments , instr2 . mWatcher , instr2 . mUiAutomationConnection , testMode , mBinderTransactionTrackingEnabled , enableTrackAllocation , isRestrictedBackupMode || ! normalMode , app . isPersistent (), new Configuration ( app . getWindowProcessController (). getConfiguration ()), app . compat , getCommonServicesLocked ( app . isolated ), mCoreSettingsObserver . getCoreSettingsLocked (), buildSerial , autofillOptions , contentCaptureOptions , app . mDisabledCompatChanges ); if ( normalMode ) { try { //2 didSomething = mAtmInternal . attachApplication ( app . getWindowProcessController ()); } catch ( Exception e ) { Slog . wtf ( TAG , \"Exception thrown launching activities in \" + app , e ); badApp = true ; } } } \u8fd9\u91cc\u4e3b\u8981\u521b\u5efa\u4e86Looper\u548cActivityThread\u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5e94\u7528ApplicationThread\u6ce8\u518c\u5230AMS\u4e2d\uff0cApplicationThread\u662fActivityThread\u7684\u5185\u90e8\u7c7b\u5b9e\u73b0\u4e86IApplicationThread.Stub\u7528\u6b64\u5bf9\u8c61\u53ef\u8de8\u8fdb\u7a0b\u901a\u4fe1\u3002 \u6211\u4eec\u5206\u4e24\u6b65\u770b\u8fd9\u4e2a\u903b\u8f91\uff1a 1\u3001\u5728AMS\u7ed1\u5b9aApplicationThread\u65f6\uff0c\u53d1\u9001\u4e86\u4e00\u4e2aH.BIND_APPLICATION\u7684Message\uff0c\u5728Handler\u4e2d\u5904\u7406\u8be5\u6d88\u606f\u65f6\u8c03\u7528\u4e86Application\u7684onCreate\u65b9\u6cd5\u3002 @Override public final void bindApplication ( String processName , ApplicationInfo appInfo , ProviderInfoList providerList , ComponentName instrumentationName , ProfilerInfo profilerInfo , Bundle instrumentationArgs , IInstrumentationWatcher instrumentationWatcher , IUiAutomationConnection instrumentationUiConnection , int debugMode , boolean enableBinderTracking , boolean trackAllocation , boolean isRestrictedBackupMode , boolean persistent , Configuration config , CompatibilityInfo compatInfo , Map services , Bundle coreSettings , String buildSerial , AutofillOptions autofillOptions , ContentCaptureOptions contentCaptureOptions , long [] disabledCompatChanges ) { ... sendMessage ( H . BIND_APPLICATION , data ); } public void handleMessage ( Message msg ) { if ( DEBUG_MESSAGES ) Slog . v ( TAG , \">>> handling: \" + codeToString ( msg . what )); switch ( msg . what ) { case BIND_APPLICATION : Trace . traceBegin ( Trace . TRACE_TAG_ACTIVITY_MANAGER , \"bindApplication\" ); AppBindData data = ( AppBindData ) msg . obj ; handleBindApplication ( data ); Trace . traceEnd ( Trace . TRACE_TAG_ACTIVITY_MANAGER ); break ; ... } } private void handleBindApplication ( AppBindData data ) { ... mInstrumentation . callApplicationOnCreate ( app ); ... } //Application.java public void onCreate () { } \u5230\u8fd9\u91cc\u4e3a\u6b62\uff0c\u65b0\u7684app\u7ebf\u7a0b\u5df2\u7ecf\u542f\u52a8\u5e76\u4e14\u7ed1\u5b9a\u4e86Application","title":"\u65b0\u7684\u8fdb\u7a0b\u542f\u52a8"},{"location":"android/app_startup/#activity","text":"2\u3001\u5728mAtmInternal\u7684attachApplication\u4e2d\u901a\u8fc7\u5c42\u5c42\u8c03\u7528\u5230ActivityStackSupervisor.realStartActivityLocked\u65b9\u6cd5\u3002 boolean realStartActivityLocked ( ActivityRecord r , WindowProcessController proc , boolean andResume , boolean checkConfig ) throws RemoteException { ... // \u521b\u5efaactivity\u542f\u52a8\u4e8b\u52a1 final ClientTransaction clientTransaction = ClientTransaction . obtain ( proc . getThread (), r . appToken ); final DisplayContent dc = r . getDisplay (). mDisplayContent ; clientTransaction . addCallback ( LaunchActivityItem . obtain ( new Intent ( r . intent ), System . identityHashCode ( r ), r . info , mergedConfiguration . getGlobalConfiguration (), mergedConfiguration . getOverrideConfiguration (), r . compat , r . launchedFromPackage , task . voiceInteractor , proc . getReportedProcState (), r . getSavedState (), r . getPersistentSavedState (), results , newIntents , dc . isNextTransitionForward (), proc . createProfilerInfoIfNeeded (), r . assistToken , r . createFixedRotationAdjustmentsIfNeeded ())); // Set desired final state. final ActivityLifecycleItem lifecycleItem ; if ( andResume ) { lifecycleItem = ResumeActivityItem . obtain ( dc . isNextTransitionForward ()); } else { lifecycleItem = PauseActivityItem . obtain (); } clientTransaction . setLifecycleStateRequest ( lifecycleItem ); //\u6267\u884cclientTransaction mService . getLifecycleManager (). scheduleTransaction ( clientTransaction ); ... } ClientTransaction\u7ba1\u7406\u4e86activity\u7684\u542f\u52a8\u4fe1\u606f\uff0c\u901a\u8fc7ClientLifecycleManager\u6267\u884c\uff0c\u8c03\u7528 scheduleTransaction\u65b9\u6cd5\uff0c\u770b\u4e0b\u8fd9\u4e2a\u65b9\u6cd5\uff1a void scheduleTransaction ( ClientTransaction transaction ) throws RemoteException { final IApplicationThread client = transaction . getClient (); transaction . schedule (); if ( ! ( client instanceof Binder )) { transaction . recycle (); } } \u8c03\u7528\u4e86ClientTransaction\u7c7b\u7684schedule\u65b9\u6cd5\uff1a public void schedule () throws RemoteException { mClient . scheduleTransaction ( this ); } mClient\u662f\u4e00\u4e2aIApplicationThread\u63a5\u53e3\uff0c\u4e0a\u9762\u6211\u4eec\u4e5f\u5206\u6790\u5230\uff0c\u5b83\u7684\u5b9e\u73b0\u662fApplicationThread\uff0c\u800cApplicationThread\u662fActivityThread\u7684\u5185\u90e8\u7c7b\uff0c\u6211\u4eec\u8fdb\u53bb\u770b\u4e0b\uff1a @Override public void scheduleTransaction ( ClientTransaction transaction ) throws RemoteException { ActivityThread . this . scheduleTransaction ( transaction ); } ApplicationThread\u7684scheduleTransaction\u65b9\u6cd5\u5176\u5b9e\u662f\u8c03\u7528\u4e86ActivityThread\u7684\u540c\u540d\u65b9\u6cd5\u3002\u800cActivityThread\u81ea\u8eab\u5e76\u6ca1\u6709\u5b9a\u4e49\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u800c\u662f\u7ee7\u627f\u81ea\u7236\u7c7bClientTransactionHandler\uff1a void scheduleTransaction ( ClientTransaction transaction ) { transaction . preExecute ( this ); sendMessage ( ActivityThread . H . EXECUTE_TRANSACTION , transaction ); } scheduleTransaction\u65b9\u6cd5\u4e2d\u53d1\u9001\u4e86EXECUTE_TRANSACTION\u6d88\u606f\u7ed9ActivityThread\u7684H\u7c7b\u5904\u7406\uff0cH\u80af\u5b9a\u662f\u7ee7\u627f\u81eaHandler\u4e86\uff0c\u6765\u770b\u4e0b\uff1a class H extends Handler { public void handleMessage ( Message msg ) { switch ( msg . what ) { ... case EXECUTE_TRANSACTION : final ClientTransaction transaction = ( ClientTransaction ) msg . obj ; mTransactionExecutor . execute ( transaction ); if ( isSystem ()) { transaction . recycle (); } break ; ... } } } \u901a\u8fc7handleMessage\u6765\u5904\u7406\u8fd9\u4e2a\u6d88\u606f\uff0c\u91cc\u9762\u53c8\u8c03\u7528\u4e86TransactionExecutor\u7684execute\u65b9\u6cd5\uff1a public void execute ( ClientTransaction transaction ) { ... executeCallbacks ( transaction ); executeLifecycleState ( transaction ); mPendingActions . clear (); } public void executeCallbacks ( ClientTransaction transaction ) { final List < ClientTransactionItem > callbacks = transaction . getCallbacks (); ... final int size = callbacks . size (); for ( int i = 0 ; i < size ; ++ i ) { final ClientTransactionItem item = callbacks . get ( i ); ... item . execute ( mTransactionHandler , token , mPendingActions ); } } private void executeLifecycleState ( ClientTransaction transaction ) { final ActivityLifecycleItem lifecycleItem = transaction . getLifecycleStateRequest (); //\u751f\u547d\u5468\u671f\u7684\u8fc7\u6e21 cycleToPath ( r , lifecycleItem . getTargetState (), true /* excludeLastState */ , transaction ); lifecycleItem . execute ( mTransactionHandler , token , mPendingActions ); lifecycleItem . postExecute ( mTransactionHandler , token , mPendingActions ); } \u8fd9\u91cc\u5206\u522b\u8c03\u7528\u4e86executeCallbacks\u548cexecuteLifecycleState\uff0c\u4e5f\u5c31\u662f\u4e8b\u52a1Callback\u548cLifecycleState\u7684execute\u65b9\u6cd5\uff0c\u8fd9\u91cc\u7684Callback\u548cLifecycleState\u662f\u5728ActivityStackSupervisor\u7684realStartActivityLocked\u6d41\u7a0b\u521b\u5efa\u7684\uff0c\u5206\u522b\u5bf9\u5e94\u7684\u662fLaunchActivityItem\u548cResumeActivityItem\u3002\u6765\u770b\u4e0b\u8fd9\u4e24\u4e2aexecute\u65b9\u6cd5\uff1a //LaunchActivityItem.java public void execute ( ClientTransactionHandler client , IBinder token , PendingTransactionActions pendingActions ) { ... client . handleLaunchActivity ( r , pendingActions , null /* customIntent */ ); } //ResumeActivityItem.java public void execute ( ClientTransactionHandler client , IBinder token , PendingTransactionActions pendingActions ) { ... client . handleResumeActivity ( token , true /* finalStateRequest */ , mIsForward , \"RESUME_ACTIVITY\" ); } \u53ef\u4ee5\u770b\u5230\u8fd9\u4e24\u4e2aexecute\u65b9\u6cd5\u91cc\u90fd\u662f\u8c03\u7528\u4e86ClientTransactionHandler\u6765\u5904\u7406activity\u7684\uff0c\u800c ClientTransactionHandler\u662f\u62bd\u8c61\u7c7b\uff0c\u6700\u7ec8\u53c8\u56de\u5230\u4e86ActivityThread\u7c7b\u4e2d\uff0c\u770b\u4e0b\uff1a public Activity handleLaunchActivity ( ActivityClientRecord r , ... final Activity a = performLaunchActivity ( r , customIntent ); return a ; } private Activity performLaunchActivity ( ActivityClientRecord r , Intent customIntent ) { //\u83b7\u53d6activity\u4fe1\u606f ActivityInfo aInfo = r . activityInfo ; //\u62ff\u5230\u542f\u52a8activity\u7684\u7ec4\u4ef6\u540d ComponentName component = r . intent . getComponent (); ... ContextImpl appContext = createBaseContextForActivity ( r ); Activity activity = null ; try { java . lang . ClassLoader cl = appContext . getClassLoader (); activity = mInstrumentation . newActivity ( cl , component . getClassName (), r . intent ); } ... try { Application app = r . packageInfo . makeApplication ( false , mInstrumentation ); ... activity . attach ( appContext , this , getInstrumentation (), r . token , r . ident , app , r . intent , r . activityInfo , title , r . parent , r . embeddedID , r . lastNonConfigurationInstances , config , r . referrer , r . voiceInteractor , window , r . configCallback , r . assistToken ); int theme = r . activityInfo . getThemeResource (); if ( theme != 0 ) { activity . setTheme ( theme ); } ... activity . mCalled = false ; if ( r . isPersistable ()) { mInstrumentation . callActivityOnCreate ( activity , r . state , r . persistentState ); } else { mInstrumentation . callActivityOnCreate ( activity , r . state ); } ... return activity ; } \u68b3\u7406\u4e0b\u8fd9\u4e2a\u65b9\u6cd5\u505a\u4e86\u54ea\u4e9b\u4e8b\u60c5\uff1a \u521b\u5efa\u542f\u52a8activity\u7684\u4e0a\u4e0b\u6587\u73af\u5883 \u901a\u8fc7Instrumentation\u7684newActivity\u65b9\u6cd5\uff0c\u4ee5\u53cd\u5c04\u5f62\u5f0f\u521b\u5efaactivity\u5b9e\u4f8b \u5982\u679cApplication\u4e0d\u5b58\u5728\u7684\u8bdd\u4f1a\u521b\u5efaApplication\u5e76\u8c03\u7528Application\u7684onCreate\u65b9\u6cd5 \u521d\u59cb\u5316activity\uff0c\u901a\u8fc7Activity\u7684attach\u65b9\u6cd5\uff0c\u5b9e\u4f8b\u5316Window\u5bf9\u8c61\uff0c\u5e76\u5b9e\u73b0Activity\u548cWindow\u76f8\u5173\u8054 \u901a\u8fc7Instrumentation\u8c03\u7528activity\u7684**onCreate**\u65b9\u6cd5 \u4e0ehandleLaunchActivity\u7c7b\u4f3c\u7684\uff0chandleResumeActivity\u5219\u662f\u8c03\u7528\u4e86performResumeActivity\u65b9\u6cd5\u3002\u5176\u5927\u4f53\u4e0a\u4f9d\u6b21\u505a\u4e86\uff1a \u5982\u679c\u9700\u8981\uff0c\u8c03\u7528\u5f85Resume Activity\u7684onNewIntent\u3001onActivityResult\u56de\u8c03\uff1b \u8c03\u7528Activity\u7684performResume\u65b9\u6cd5\uff0c\u5176\u4e2d\u8c03\u7528\u4e86**onResume**\u56de\u8c03\uff1b \u8fd9\u6837\uff0capp\u5c31\u542f\u52a8\u5b8c\u6210\u4e86\u3002 \u6700\u540e\uff0c\u7ed9\u5927\u5bb6\u770b\u4e0b\u6574\u4f53\u7684\u6d41\u7a0b\u56fe\uff08\u5176\u5b9e\u662f\u4ece\u7f51\u4e0a\u76d7\u7684\u56fe.......\u54c8\u54c8\uff09","title":"\u521b\u5efaactivity"},{"location":"android/app_startup/#_2","text":"\u901a\u8fc7\u4e0a\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u57fa\u672c\u628aapp\u542f\u52a8\u6d41\u7a0b\u8d70\u5b8c\u4e86\uff0c\u770b\u8d77\u6765\u6bd4\u8f83\u590d\u6742\uff0c\u5176\u5b9e\u901a\u8fc7\u6574\u4f53\u5206\u6790\uff0c\u8fd8\u662f\u80fd\u8d70\u901a\u7684\uff0c\u9047\u5230\u6d41\u7a0b\u4e0d\u901a\u65f6\uff0c\u4e5f\u53ef\u4ee5debug\u3002 \u70b9\u51fb\u56fe\u6807\uff0cLauncher\u5411AMS\u8bf7\u6c42\u542f\u52a8app AMS\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u8bb0\u5f55app\u7684\u4fe1\u606f\uff0c\u5e76\u544a\u77e5Launcher\u8fdb\u5165pause\u72b6\u6001 Launcher\u8fdb\u5165pause\u72b6\u6001\u540e\uff0c\u544a\u77e5AMS AMS\u68c0\u6d4b\u65b0\u7684app\u8fdb\u7a0b\u65f6\u5019\u5df2\u7ecf\u542f\u52a8\uff0c\u5426\u5219\u901a\u8fc7Zygote\u521b\u5efa\u65b0\u7684\u8fdb\u7a0b\u5e76\u542f\u52a8ActivityThread\u7684main\u65b9\u6cd5 \u8fdb\u7a0b\u521b\u5efa\u597d\u540e\uff0c\u8c03\u7528\u4e0a\u9762\u7684ActivityThread.main() ActivityThread\u4e2dH\u5904\u7406\u9700\u8981\u542f\u52a8Activity\u7684\u8bf7\u6c42\u6d88\u606f \u672c\u4eba\u80fd\u529b\u6709\u9650\uff0c\u5728\u5206\u6790\u8fc7\u7a0b\u4e2d\uff0c\u4ee3\u7801\u6709\u6240\u5220\u51cf\uff0c\u5982\u679c\u6587\u7ae0\u4e2d\u6709\u5199\u5f97\u4e0d\u5bf9\u7684\u5730\u65b9\uff0c\u6b22\u8fce\u5728\u7559\u8a00\u533a\u7559\u8a00\u5927\u5bb6\u4e00\u8d77\u8ba8\u8bba\uff0c\u5171\u540c\u5b66\u4e60\u8fdb\u6b65\u3002\u5982\u679c\u89c9\u5f97\u6211\u7684\u6587\u7ae0\u7ed9\u4e88\u4f60\u5e2e\u52a9\uff0c\u4e5f\u8bf7\u7ed9\u6211\u4e00\u4e2a\u559c\u6b22\u548c\u5173\u6ce8\u3002","title":"\u603b\u7ed3"},{"location":"android/media_server_build/","text":"\u6d41\u5a92\u4f53\u670d\u52a1\u5668\u642d\u5efa \u00b6 \u4e00\u3001\u670d\u52a1\u5668\u642d\u5efa \u00b6 1.\u4e0b\u8f7dnginx\u5e76\u89e3\u538b\uff1a \u00b6 wget http://nginx.org/download/nginx-1.15.3.tar.gz tar xvf nginx-1.15.3.tar.gz 2.\u4e0b\u8f7drtmp-module\u6a21\u5757\u5e76\u89e3\u538b\uff1a \u00b6 wget https://codeload.github.com/arut/nginx-rtmp-module/tar.gz/v1.2.1 tar xvf v1.2.1 3.\u8fdb\u5165nginx\u76ee\u5f55\uff1a \u00b6 cd nginx-1.15.3 \u6267\u884c\u4e0b\u9762\u547d\u4ee4\uff1a--prefix = \u751f\u6210\u7ed3\u679c\u8def\u5f84 --add-module = \u7ba1\u7406rtmp\u6a21\u5757 ./configure --prefix = ./bin --add-module = ../nginx-rtmp-module-1.2.1 \u5982\u679c\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u62a5\u4ee5\u4e0b\u9519\u8bef\uff1a ./ configure : error : the HTTP rewrite module requires the PCRE library . You can either disable the module by using -- without - http_rewrite_module option , or install the PCRE library into the system , or build the PCRE library statically from the source with nginx by using -- with - pcre = <path> option . \u8bf4\u660e\u7f3a\u5c11\u4f9d\u8d56\u5305\uff0ccentos\u7528yum\u547d\u4ee4\u5b89\u88c5\uff0cubuntu\u7528apt install\u5b89\u88c5\u3002 yum -y install zlib zlib-devel openssl openssl--devel pcre pcre-devel \u4e0d\u540c\u7684\u7cfb\u7edf\u7248\u672c\u5217\u51fa\u7684\u5b89\u88c5\u5305\u7248\u672c\u4e0d\u540c\uff0c\u53ef\u901a\u8fc7 yum search \u4f9d\u8d56\u5305 \u6765\u67e5\u770b\u3002 4.\u4e0a\u9762\u6b65\u9aa4\u6210\u529f\u540e\uff0c\u4f1a\u5728nginx\u76ee\u5f55\u4e0b\u751f\u6210Makefile\u6587\u4ef6\uff0c\u6267\u884c\u7f16\u8bd1\uff1a \u00b6 make install 5.\u7f16\u8bd1\u5b8c\u6210\u540e\uff0c\u4f1a\u5728/usr/local/nginx\u76ee\u5f55\u4e0b\u751f\u6210\u4ee5\u4e0b\u6587\u4ef6\uff1a \u00b6 6.\u8fdb\u5165conf\u76ee\u5f55\uff0c\u4fee\u6539nginx.conf\u6587\u4ef6\uff1a \u00b6 #\u5982\u679c\u4e0d\u52a0\uff0c\u542f\u52a8nginx\u670d\u52a1\u5668\u5c31\u4f1a\u62a5\u9519\uff0c\u6743\u9650\u88ab\u62d2\u7edd user root ; worker_processes 1 ; #\u5982\u679c\u542f\u52a8\u9519\u8bef\uff0c\u8fd9\u4e2a\u5c31\u662f\u9519\u8bef\u65e5\u5fd7\u8be6\u60c5 error_log logs/error.log debug ; events { worker_connections 1024 ; } rtmp { server { #\u6ce8\u610f\u7aef\u53e3\u5360\u7528 \u6d41\u5a92\u4f53\u670d\u52a1\u5668\u7684\u7aef\u53e3 listen 1935 ; #\u5982\u679c\u4e0d\u52a0\uff0c\u53ef\u80fd\u4f1a\u5931\u8d25 application myapp { live on ; #\u4e22\u5f03\u95f2\u7f6e5s\u7684\u8fde\u63a5 drop_idle_publisher 5s ; } } } #\u4e0b\u9762\u5c31\u662f\u4e3a\u4e86\u6d4b\u8bd5 http://139.224.136.101:8080/stat \u63a7\u5236\u9762\u677f\u7684\u610f\u601d http { server { #\u6ce8\u610f\u7aef\u53e3\u5360\u7528 listen 8080 ; location /stat { rtmp_stat all ; rtmp_stat_stylesheet stat.xsl ; } location /stat.xsl { #\u6ce8\u610f\u76ee\u5f55 root /root/workspace/nginxServer/nginx-rtmp-module-1.2.1/ ; } location /control { rtmp_control all ; } location /rtmp-publisher { #\u6ce8\u610f\u76ee\u5f55 root /root/workspace/nginxServer/nginx-rtmp-module-1.2.1/test ; } location / { #\u6ce8\u610f\u76ee\u5f55 root /root/workspace/nginxServer/nginx-rtmp-module-1.2.1/test/www ; } } } 7.\u8fdb\u5165nginx\u6839\u76ee\u5f55\uff0c\u6267\u884c \u00b6 /usr/local/nginx/sbin/nginx \u89e3\u51b3\u7aef\u53e3\u88ab\u5360\u7528\u95ee\u9898 nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 1935 failed ( 98 : Address already in use ) nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 8080 failed ( 98 : Address already in use ) nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 1935 failed ( 98 : Address already in use ) nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 8080 failed ( 98 : Address already in use ) nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 1935 failed ( 98 : Address already in use ) nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 8080 failed ( 98 : Address already in use ) nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 1935 failed ( 98 : Address already in use ) nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 8080 failed ( 98 : Address already in use ) nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 1935 failed ( 98 : Address already in use ) nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 8080 failed ( 98 : Address already in use ) nginx : [ emerg ] still could not bind () \u9700\u8981\u5b89\u88c5lsof\u5de5\u5177\u6765\u67e5\u770b\u88ab\u5360\u7528\u7aef\u53e3 yum install lsof \u6267\u884c\u547d\u4ee4\u67e5\u770b\u54ea\u4e9b\u7aef\u53e3\u88ab\u5360\u7528\uff1a lsof -i :8080 #\u4f9d\u6b21\u7ed3\u675f\u5360\u7528\u7aef\u53e3\u7684\u8fdb\u7a0b kill -9 pid \u6392\u67e5\u7aef\u53e3\u6ca1\u6709\u4efb\u4f55\u8fdb\u7a0b\u5360\u7528\u540e\uff0c\u518d\u6b21\u542f\u52a8nginx /usr/local/nginx/sbin/nginx \u5728\u5b89\u5168\u7ec4\u6dfb\u52a0\u914d\u7f6e\u89c4\u5219\uff0c\u6253\u5f008080\u7aef\u53e3\u548c1935\u7aef\u53e3 \u81f3\u6b64\uff0c\u6d41\u5a92\u4f53\u670d\u52a1\u5668\u642d\u5efa\u5b8c\u6210\uff0c\u76f4\u63a5\u8bbf\u95ee\u5373\u53ef\uff1a http://ip:8080/stat \u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u8fdb\u884c\u63a8\u6d41\u4e86\u3002 \u4e8c\u3001\u4f7f\u7528obs studio\u8fdb\u884c\u63a8\u6d41 \u00b6 \u4e0a\u9762\u6211\u4eec\u628a\u6d41\u5a92\u4f53\u670d\u52a1\u5668\u642d\u5efa\u597d\u4ee5\u540e\uff0c\u6211\u4eec\u4f7f\u7528OBS Studio\u53ef\u4ee5\u5b9e\u73b0\u7b80\u5355\u7684\u63a8\u6d41\u3002 1.\u4e0b\u8f7dOBS Studio\uff0c https://obsproject.com/zh-cn/download 2.\u6253\u5f00obs studio\u540e\uff0c\u70b9\u51fb\u6765\u6e90\u4e2d\u7684\uff0b\u53f7 \u9009\u62e9\u663e\u793a\u5668\u91c7\u96c6\uff0c\u5c31\u4f1a\u628a\u6211\u4eec\u663e\u793a\u5c4f\u7684\u754c\u9762\u6dfb\u52a0\u8fdb\u53bb\u3002 3.\u5728\u6587\u4ef6----->\u8bbe\u7f6e------>\u63a8\u6d41 \u4e2d\u9009\u62e9\u81ea\u5b9a\u4e49\u670d\u52a1\uff0c\u670d\u52a1\u5668\u5c31\u662f\u6211\u4eec\u521a\u521a\u642d\u5efa\u597d\u7684\u670d\u52a1\u5668\uff0c\u4f46\u662f\u8fd9\u91cc\u9700\u8981\u7528rtmp\u6765\u8fdb\u884c\u63a8\u6d41 4.\u70b9\u51fb\u786e\u5b9a\u540e\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u63a8\u6d41\u4e86\u3002 5.\u5728\u6d4f\u89c8\u5668\u754c\u9762\u6253\u5f00\u670d\u52a1\u5668\uff0c\u5c31\u53ef\u4ee5\u770b\u89c1\u6211\u4eec\u63a8\u4e0a\u53bb\u7684\u6d41\u4e86\u3002 6.\u7528VLC\u64ad\u653e\u5668\uff0c\u901a\u8fc7\u7f51\u7edc\u4e32\u6d41 \u8f93\u5165\u6211\u4eec\u7684rtmp\u6d41\u5730\u5740\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u62c9\u6d41\u4e86\u3002","title":"\u6d41\u5a92\u4f53\u670d\u52a1\u5668\u642d\u5efa"},{"location":"android/media_server_build/#_1","text":"","title":"\u6d41\u5a92\u4f53\u670d\u52a1\u5668\u642d\u5efa"},{"location":"android/media_server_build/#_2","text":"","title":"\u4e00\u3001\u670d\u52a1\u5668\u642d\u5efa"},{"location":"android/media_server_build/#1nginx","text":"wget http://nginx.org/download/nginx-1.15.3.tar.gz tar xvf nginx-1.15.3.tar.gz","title":"1.\u4e0b\u8f7dnginx\u5e76\u89e3\u538b\uff1a"},{"location":"android/media_server_build/#2rtmp-module","text":"wget https://codeload.github.com/arut/nginx-rtmp-module/tar.gz/v1.2.1 tar xvf v1.2.1","title":"2.\u4e0b\u8f7drtmp-module\u6a21\u5757\u5e76\u89e3\u538b\uff1a"},{"location":"android/media_server_build/#3nginx","text":"cd nginx-1.15.3 \u6267\u884c\u4e0b\u9762\u547d\u4ee4\uff1a--prefix = \u751f\u6210\u7ed3\u679c\u8def\u5f84 --add-module = \u7ba1\u7406rtmp\u6a21\u5757 ./configure --prefix = ./bin --add-module = ../nginx-rtmp-module-1.2.1 \u5982\u679c\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u62a5\u4ee5\u4e0b\u9519\u8bef\uff1a ./ configure : error : the HTTP rewrite module requires the PCRE library . You can either disable the module by using -- without - http_rewrite_module option , or install the PCRE library into the system , or build the PCRE library statically from the source with nginx by using -- with - pcre = <path> option . \u8bf4\u660e\u7f3a\u5c11\u4f9d\u8d56\u5305\uff0ccentos\u7528yum\u547d\u4ee4\u5b89\u88c5\uff0cubuntu\u7528apt install\u5b89\u88c5\u3002 yum -y install zlib zlib-devel openssl openssl--devel pcre pcre-devel \u4e0d\u540c\u7684\u7cfb\u7edf\u7248\u672c\u5217\u51fa\u7684\u5b89\u88c5\u5305\u7248\u672c\u4e0d\u540c\uff0c\u53ef\u901a\u8fc7 yum search \u4f9d\u8d56\u5305 \u6765\u67e5\u770b\u3002","title":"3.\u8fdb\u5165nginx\u76ee\u5f55\uff1a"},{"location":"android/media_server_build/#4nginxmakefile","text":"make install","title":"4.\u4e0a\u9762\u6b65\u9aa4\u6210\u529f\u540e\uff0c\u4f1a\u5728nginx\u76ee\u5f55\u4e0b\u751f\u6210Makefile\u6587\u4ef6\uff0c\u6267\u884c\u7f16\u8bd1\uff1a"},{"location":"android/media_server_build/#5usrlocalnginx","text":"","title":"5.\u7f16\u8bd1\u5b8c\u6210\u540e\uff0c\u4f1a\u5728/usr/local/nginx\u76ee\u5f55\u4e0b\u751f\u6210\u4ee5\u4e0b\u6587\u4ef6\uff1a"},{"location":"android/media_server_build/#6confnginxconf","text":"#\u5982\u679c\u4e0d\u52a0\uff0c\u542f\u52a8nginx\u670d\u52a1\u5668\u5c31\u4f1a\u62a5\u9519\uff0c\u6743\u9650\u88ab\u62d2\u7edd user root ; worker_processes 1 ; #\u5982\u679c\u542f\u52a8\u9519\u8bef\uff0c\u8fd9\u4e2a\u5c31\u662f\u9519\u8bef\u65e5\u5fd7\u8be6\u60c5 error_log logs/error.log debug ; events { worker_connections 1024 ; } rtmp { server { #\u6ce8\u610f\u7aef\u53e3\u5360\u7528 \u6d41\u5a92\u4f53\u670d\u52a1\u5668\u7684\u7aef\u53e3 listen 1935 ; #\u5982\u679c\u4e0d\u52a0\uff0c\u53ef\u80fd\u4f1a\u5931\u8d25 application myapp { live on ; #\u4e22\u5f03\u95f2\u7f6e5s\u7684\u8fde\u63a5 drop_idle_publisher 5s ; } } } #\u4e0b\u9762\u5c31\u662f\u4e3a\u4e86\u6d4b\u8bd5 http://139.224.136.101:8080/stat \u63a7\u5236\u9762\u677f\u7684\u610f\u601d http { server { #\u6ce8\u610f\u7aef\u53e3\u5360\u7528 listen 8080 ; location /stat { rtmp_stat all ; rtmp_stat_stylesheet stat.xsl ; } location /stat.xsl { #\u6ce8\u610f\u76ee\u5f55 root /root/workspace/nginxServer/nginx-rtmp-module-1.2.1/ ; } location /control { rtmp_control all ; } location /rtmp-publisher { #\u6ce8\u610f\u76ee\u5f55 root /root/workspace/nginxServer/nginx-rtmp-module-1.2.1/test ; } location / { #\u6ce8\u610f\u76ee\u5f55 root /root/workspace/nginxServer/nginx-rtmp-module-1.2.1/test/www ; } } }","title":"6.\u8fdb\u5165conf\u76ee\u5f55\uff0c\u4fee\u6539nginx.conf\u6587\u4ef6\uff1a"},{"location":"android/media_server_build/#7nginx","text":"/usr/local/nginx/sbin/nginx \u89e3\u51b3\u7aef\u53e3\u88ab\u5360\u7528\u95ee\u9898 nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 1935 failed ( 98 : Address already in use ) nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 8080 failed ( 98 : Address already in use ) nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 1935 failed ( 98 : Address already in use ) nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 8080 failed ( 98 : Address already in use ) nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 1935 failed ( 98 : Address already in use ) nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 8080 failed ( 98 : Address already in use ) nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 1935 failed ( 98 : Address already in use ) nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 8080 failed ( 98 : Address already in use ) nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 1935 failed ( 98 : Address already in use ) nginx : [ emerg ] bind () to 0 . 0 . 0 . 0 : 8080 failed ( 98 : Address already in use ) nginx : [ emerg ] still could not bind () \u9700\u8981\u5b89\u88c5lsof\u5de5\u5177\u6765\u67e5\u770b\u88ab\u5360\u7528\u7aef\u53e3 yum install lsof \u6267\u884c\u547d\u4ee4\u67e5\u770b\u54ea\u4e9b\u7aef\u53e3\u88ab\u5360\u7528\uff1a lsof -i :8080 #\u4f9d\u6b21\u7ed3\u675f\u5360\u7528\u7aef\u53e3\u7684\u8fdb\u7a0b kill -9 pid \u6392\u67e5\u7aef\u53e3\u6ca1\u6709\u4efb\u4f55\u8fdb\u7a0b\u5360\u7528\u540e\uff0c\u518d\u6b21\u542f\u52a8nginx /usr/local/nginx/sbin/nginx \u5728\u5b89\u5168\u7ec4\u6dfb\u52a0\u914d\u7f6e\u89c4\u5219\uff0c\u6253\u5f008080\u7aef\u53e3\u548c1935\u7aef\u53e3 \u81f3\u6b64\uff0c\u6d41\u5a92\u4f53\u670d\u52a1\u5668\u642d\u5efa\u5b8c\u6210\uff0c\u76f4\u63a5\u8bbf\u95ee\u5373\u53ef\uff1a http://ip:8080/stat \u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u8fdb\u884c\u63a8\u6d41\u4e86\u3002","title":"7.\u8fdb\u5165nginx\u6839\u76ee\u5f55\uff0c\u6267\u884c"},{"location":"android/media_server_build/#obs_studio","text":"\u4e0a\u9762\u6211\u4eec\u628a\u6d41\u5a92\u4f53\u670d\u52a1\u5668\u642d\u5efa\u597d\u4ee5\u540e\uff0c\u6211\u4eec\u4f7f\u7528OBS Studio\u53ef\u4ee5\u5b9e\u73b0\u7b80\u5355\u7684\u63a8\u6d41\u3002 1.\u4e0b\u8f7dOBS Studio\uff0c https://obsproject.com/zh-cn/download 2.\u6253\u5f00obs studio\u540e\uff0c\u70b9\u51fb\u6765\u6e90\u4e2d\u7684\uff0b\u53f7 \u9009\u62e9\u663e\u793a\u5668\u91c7\u96c6\uff0c\u5c31\u4f1a\u628a\u6211\u4eec\u663e\u793a\u5c4f\u7684\u754c\u9762\u6dfb\u52a0\u8fdb\u53bb\u3002 3.\u5728\u6587\u4ef6----->\u8bbe\u7f6e------>\u63a8\u6d41 \u4e2d\u9009\u62e9\u81ea\u5b9a\u4e49\u670d\u52a1\uff0c\u670d\u52a1\u5668\u5c31\u662f\u6211\u4eec\u521a\u521a\u642d\u5efa\u597d\u7684\u670d\u52a1\u5668\uff0c\u4f46\u662f\u8fd9\u91cc\u9700\u8981\u7528rtmp\u6765\u8fdb\u884c\u63a8\u6d41 4.\u70b9\u51fb\u786e\u5b9a\u540e\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u63a8\u6d41\u4e86\u3002 5.\u5728\u6d4f\u89c8\u5668\u754c\u9762\u6253\u5f00\u670d\u52a1\u5668\uff0c\u5c31\u53ef\u4ee5\u770b\u89c1\u6211\u4eec\u63a8\u4e0a\u53bb\u7684\u6d41\u4e86\u3002 6.\u7528VLC\u64ad\u653e\u5668\uff0c\u901a\u8fc7\u7f51\u7edc\u4e32\u6d41 \u8f93\u5165\u6211\u4eec\u7684rtmp\u6d41\u5730\u5740\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u62c9\u6d41\u4e86\u3002","title":"\u4e8c\u3001\u4f7f\u7528obs studio\u8fdb\u884c\u63a8\u6d41"}]}